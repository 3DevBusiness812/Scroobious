{
  "name": "scroobious-api",
  "private": true,
  "version": "0.0.0",
  "description": "Scroobious API",
  "license": "PRIVATE",
  "scripts": {
    "bootstrap": "./tools/bootstrap.sh",
    "//": "This is the default command run in CI, so it should point to Prod and also create Prod config",
    "build": "rm -rf ./dist && yarn compile",
    "build:api": "env && echo \"\" && echo \"\" && yarn && yarn build && yarn cleanup:dist && yarn db:migrate && yarn db:seed:run",
    "build:jobs": "env && echo \"\" && echo \"\" && yarn && yarn build && yarn cleanup:dist",
    "build:dev": "yarn && yarn run config:dev && yarn codegen && yarn build",
    "check:code": "tsc --noEmit && yarn lint && prettier ./{src,test,tools}/**/*.ts --write",
    "clean": "yarn db:drop && rm -rf ./node_modules ./generated ./dist",
    "cleanup:dist": "cd ./dist/db && ls && find . -name \"*.map\" -type f -delete && ls && cd -",
    "codegen": "warthog codegen",
    "compile": "yarn tsc --build tsconfig.json",
    "config:dev": "WARTHOG_ENV=development yarn dotenv:generate",
    "copy:sql:bak": "Note: rsync doesnt exist in render: rsync -a --include '*/' --include '*.sql' --exclude '*' src dist/src",
    "deploy": "TODO: create script to deploy to render",
    "dotenv:generate": "./tools/config.sh",
    "db:create": "warthog db:create",
    "db:drop": "warthog db:drop",
    "db:migrate:generate": "warthog db:migrate:generate --name",
    "db:migrate": "warthog db:migrate",
    "db:migrate:revert": "yarn ts-node ./node_modules/.bin/typeorm migration:revert --config ./src/db/ormconfig.seed.ts",
    "db:seed:generate": "yarn ts-node ./node_modules/.bin/typeorm migration:create --config ./src/db/ormconfig.seed.ts -n ",
    "db:seed:revert": "yarn ts-node ./node_modules/.bin/typeorm migration:revert --config ./src/db/ormconfig.seed.ts",
    "db:seed:run": "yarn ts-node ./node_modules/.bin/typeorm migration:run --config ./src/db/ormconfig.seed.ts",
    "lint": "eslint './+(src|test|tools)/**/*.{js,ts}' --fix",
    "prettier": "prettier ./{src,test,tools}/**/*.ts --write",
    "start": "yarn start:api",
    "start:api": "node dist/src/api.js",
    "start:api:dev": "yarn switch:dev && npm-run-all --parallel start:api:dev:run*",
    "start:api:docker": "yarn switch:docker && npm-run-all --parallel start:api:dev:run*",
    "//ts-node-dev --respawn --transpileOnly --ignore-watch node_modules ./app/app.ts": "foo",
    "start:api:dev:run": "tsnd --debug --transpile-only --ignore-watch db --ignore-watch \".*\\.model\\.ts\" --ignore-watch \".*\\.job\\.ts\" --ignore-watch \"generated/index.ts\" --ignore-watch \"generated/classes.ts\" --ignore-watch node_modules --watch ./generated/schema.graphql,./src/seed-class.ts,package.json --respawn ./src/api.ts",
    "start:api:dev:models": "yarn chokidar \"**/*.model.ts\" -c \"yarn codegen\"",
    "start:jobs:dev": "tsnd --debug --transpile-only --ignore-watch db --ignore-watch \".*\\.model\\.ts\" --ignore-watch \".*\\.service\\.ts\" --ignore-watch \"generated/index.ts\" --ignore-watch \"generated/classes.ts\" --ignore-watch node_modules --watch *.job.ts --respawn ./src/jobs.ts",
    "//start:jobs:docker": "yarn switch:docker && ts-node --type-check src/jobs.ts",
    "start:jobs": "node dist/src/jobs.js",
    "switch:dev": "yarn run config:dev",
    "switch:docker": "WARTHOG_ENV=docker yarn dotenv:generate",
    "switch:prod": "WARTHOG_ENV=development:prod-like yarn dotenv:generate",
    "test": "./test/test.sh",
    "test:watch": "./test/test.sh --watch",
    "start:all": "DEBUG=warthog* docker-compose up redis api jobs postgres"
  },
  "dependencies": {
    "@faker-js/faker": "^6.0.0-alpha.6",
    "@foal/core": "^2.5.0",
    "@hapi/joi": "^17.1.1",
    "@types/debug": "^4.1.5",
    "@types/express-jwt": "^6.0.1",
    "@types/hapi__joi": "^17.1.6",
    "@types/jsonwebtoken": "^8.5.1",
    "@types/lodash.get": "^4.4.6",
    "@types/lodash.template": "^4.5.0",
    "@types/nanoid": "^3.0.0",
    "@types/secure-password": "^3.1.1",
    "@types/winston": "^2.4.4",
    "apollo-server-errors": "^3.1.0",
    "aws-sdk": "^2.1051.0",
    "axios": "^0.21.1",
    "bullmq": "^1.46.3",
    "class-validator": "^0.13.2",
    "clean-deep": "^3.4.0",
    "customerio-node": "^3.0.3",
    "dataloader": "^2.0.0",
    "dotenv": "^8.2.0",
    "eslint": "^7.7.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^3.1.4",
    "express-jwt": "^6.0.0",
    "form-data": "^4.0.0",
    "graphql": "^14.6",
    "ioredis": "^4.27.9",
    "joi": "^17.4.0",
    "jsonwebtoken": "^8.5.1",
    "lodash.get": "^4.4.2",
    "lodash.template": "^4.5.0",
    "nanoid": "^3.2.0",
    "node-fetch": "^2.6.1",
    "pg": "^8.0.3",
    "reflect-metadata": "^0.1.13",
    "secure-password": "^4.0.0",
    "slack-hawk-down": "^0.5.3",
    "stripe": "^8.195.0",
    "type-graphql": "^0.17.6",
    "typedi": "0.8.0",
    "typeorm": "0.2.32",
    "typeorm-typedi-extensions": "^0.4.1",
    "typescript": "^4.2.4",
    "warthog": "^3.0.0-beta.27"
  },
  "devDependencies": {
    "@types/jest": "^27.0.2",
    "chokidar": "^3.5.2",
    "chokidar-cli": "^2.1.0",
    "dotenvi": "^0.9.1",
    "fishery": "^1.4.0",
    "jest": "^27.3.1",
    "nodemon": "^2.0.7",
    "npm-run-all": "^4.1.5",
    "prettier": "^2.5.1",
    "ts-jest": "^27.0.7",
    "ts-node": "^9.1.1",
    "ts-node-dev": "^1.1.6",
    "typescript-eslint": "^0.0.1-alpha.0",
    "yargs": "^17.0.0-candidate.7"
  },
  "resolutions": {
    "graphql": "^14.6",
    "graphql-tools": "^4.0.8",
    "typeorm": "0.2.32",
    "class-validator": "^0.13.2",
    "typedi": "0.8.0"
  },
  "jest": {
    "globals": {
      "ts-jest": {
        "tsconfig": "tsconfig.test.json"
      }
    },
    "transform": {
      ".ts": "ts-jest"
    },
    "testRegex": "\\.test\\.ts$",
    "moduleFileExtensions": [
      "js",
      "ts"
    ],
    "collectCoverageFrom": [
      "src/**/*.ts"
    ],
    "coveragePathIgnorePatterns": [
      "/node_modules/",
      "src/test/*",
      "\\.test\\.ts$"
    ],
    "setupFilesAfterEnv": [
      "./test/setupFilesAfterEnv.ts"
    ]
  },
  "prettier": {
    "printWidth": 100,
    "singleQuote": true
  }
}
