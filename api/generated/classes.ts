// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore

import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, IDType } from 'warthog';

import { CalendlyWebhookEventStatus } from "../src/modules/calendly/calendly-webhook-event/calendly-webhook-event.model";

import { EventStatus } from "../src/modules/subscriptions/event/event.model";

import { ExternalSystemType } from "../src/modules/core/external-system-id/external-system-id.model";

import { UserPlanRegistrationStatus } from "../src/modules/identity/user-plan-registration/user-plan-registration.model";

import { CourseProductStatus } from "../src/modules/courses/course-product/course-product.model";

import { CourseStepDefinitionType } from "../src/modules/courses/course-step-definition/course-step-definition.model";

import { CourseStepStatus } from "../src/modules/courses/course-step/course-step.model";

import { CourseStatus } from "../src/modules/courses/course/course.model";

import { PitchDeckStatus } from "../src/modules/pitches/pitch-deck/pitch-deck.model";

import { PitchWatchStatus } from "../src/modules/pitches/pitch-user-status/pitch-user-status.model";

import { PitchListStatus } from "../src/modules/pitches/pitch-user-status/pitch-user-status.model";

import { PitchVideoStatus } from "../src/modules/pitches/pitch-video/pitch-video.model";

import { PitchStatus } from "../src/modules/pitches/pitch/pitch.model";

import { PitchCommentVisibility } from "../src/modules/pitches/pitch-comment/pitch-comment.model";

import { PaymentStatus } from "../src/modules/plan/plan.model";

import { UserStatus } from "../src/modules/identity/user/user.model";

import { PasswordResetStatus } from "../src/modules/identity/password-reset/password-reset.model";

import { UserInviteStatus } from "../src/modules/identity/user-invite/user-invite.model";

import { PitchMeetingFeedbackStatus } from "../src/modules/pitches/pitch-meeting-feedback/pitch-meeting-feedback.model";

import { PitchWrittenFeedbackStatus } from "../src/modules/pitches/pitch-written-feedback/pitch-written-feedback.model";

import { StripeWebhookEventStatus } from "../src/modules/stripe/stripe-webhook-event/stripe-webhook-event.model";

import { SubscriptionType } from "../src/modules/subscriptions/subscription/subscription.model";

// @ts-ignore

import { UserRole } from "../src/modules/access-management/user-role/user-role.model";

// @ts-ignore

import { Role } from "../src/modules/access-management/role/role.model";

// @ts-ignore

import { RolePermission } from "../src/modules/access-management/role-permission/role-permission.model";

// @ts-ignore

import { Permission } from "../src/modules/access-management/permission/permission.model";

// @ts-ignore

import { CalendlyWebhookEvent } from "../src/modules/calendly/calendly-webhook-event/calendly-webhook-event.model";

// @ts-ignore

import { EventType } from "../src/modules/subscriptions/event-type/event-type.model";

// @ts-ignore

import { Event } from "../src/modules/subscriptions/event/event.model";

// @ts-ignore

import { Conversation } from "../src/modules/conversations/conversation/conversation.model";

// @ts-ignore

import { ConversationParticipant } from "../src/modules/conversations/conversation_participant/conversation_participant.model";

// @ts-ignore

import { ExternalSystemId } from "../src/modules/core/external-system-id/external-system-id.model";

// @ts-ignore

import { File } from "../src/modules/core/file/file.model";

// @ts-ignore

import { FounderProfile } from "../src/modules/founder/founder-profile/founder-profile.model";

// @ts-ignore

import { UserPlanRegistration } from "../src/modules/identity/user-plan-registration/user-plan-registration.model";

// @ts-ignore

import { InvestorProfile } from "../src/modules/investor/investor-profile/investor-profile.model";

// @ts-ignore

import { CourseProduct } from "../src/modules/courses/course-product/course-product.model";

// @ts-ignore

import { Product } from "../src/modules/products/product/product.model";

// @ts-ignore

import { CourseDefinitionProduct } from "../src/modules/courses/course-definition-product/course-definition-product.model";

// @ts-ignore

import { CourseStepDefinition } from "../src/modules/courses/course-step-definition/course-step-definition.model";

// @ts-ignore

import { CourseDefinition } from "../src/modules/courses/course-definition/course-definition.model";

// @ts-ignore

import { CourseStep } from "../src/modules/courses/course-step/course-step.model";

// @ts-ignore

import { Course } from "../src/modules/courses/course/course.model";

// @ts-ignore

import { Startup } from "../src/modules/founder/startup/startup.model";

// @ts-ignore

import { Organization } from "../src/modules/identity/organization/organization.model";

// @ts-ignore

import { PitchDeck } from "../src/modules/pitches/pitch-deck/pitch-deck.model";

// @ts-ignore

import { PitchUpdate } from "../src/modules/pitches/pitch-update/pitch-update.model";

// @ts-ignore

import { PitchUserStatus } from "../src/modules/pitches/pitch-user-status/pitch-user-status.model";

// @ts-ignore

import { Video } from "../src/modules/core/video/video.model";

// @ts-ignore

import { PitchVideo } from "../src/modules/pitches/pitch-video/pitch-video.model";

// @ts-ignore

import { Pitch } from "../src/modules/pitches/pitch/pitch.model";

// @ts-ignore

import { PitchComment } from "../src/modules/pitches/pitch-comment/pitch-comment.model";

// @ts-ignore

import { Plan } from "../src/modules/plan/plan.model";

// @ts-ignore

import { User } from "../src/modules/identity/user/user.model";

// @ts-ignore

import { ConversationMessage } from "../src/modules/conversations/conversation_message/conversation_message.model";

// @ts-ignore

import { CheckoutRequest } from "../src/modules/core/checkout/checkout-request/checkout-request.model";

// @ts-ignore

import { CheckoutResponse } from "../src/modules/core/checkout/checkout-response/checkout-response.model";

// @ts-ignore

import { StateProvince } from "../src/modules/core/state-province.model";

// @ts-ignore

import { City } from "../src/modules/core/city/city.model";

// @ts-ignore

import { CompanyRole } from "../src/modules/core/company-role.model";

// @ts-ignore

import { CorporateStructure } from "../src/modules/core/corporate-structure.model";

// @ts-ignore

import { Country } from "../src/modules/core/country.model";

// @ts-ignore

import { Criteria } from "../src/modules/core/criteria.model";

// @ts-ignore

import { Disability } from "../src/modules/core/disability.model";

// @ts-ignore

import { Ethnicity } from "../src/modules/core/ethnicity.model";

// @ts-ignore

import { Gender } from "../src/modules/core/gender.model";

// @ts-ignore

import { PresentationStatus } from "../src/modules/core/presentation-status.model";

// @ts-ignore

import { SexualOrientation } from "../src/modules/core/sexual-orientation.model";

// @ts-ignore

import { Transgender } from "../src/modules/core/transgender.model";

// @ts-ignore

import { UserActivity } from "../src/modules/core/user-activity/user-activity.model";

// @ts-ignore

import { WorkingStatus } from "../src/modules/core/working-status.model";

// @ts-ignore

import { CompanyStage } from "../src/modules/founder/common/company-stage.model";

// @ts-ignore

import { FundingStatus } from "../src/modules/founder/common/funding-status.model";

// @ts-ignore

import { Industry } from "../src/modules/founder/common/industry.model";

// @ts-ignore

import { Pronoun } from "../src/modules/founder/common/pronoun.model";

// @ts-ignore

import { Revenue } from "../src/modules/founder/common/revenue.model";

// @ts-ignore

import { AuthAccount } from "../src/modules/identity/auth/auth-account.model";

// @ts-ignore

import { PasswordReset } from "../src/modules/identity/password-reset/password-reset.model";

// @ts-ignore

import { Session } from "../src/modules/identity/session/session.model";

// @ts-ignore

import { UserType } from "../src/modules/identity/user_type/user_type.model";

// @ts-ignore

import { UserInvite } from "../src/modules/identity/user-invite/user-invite.model";

// @ts-ignore

import { VerificationRequest } from "../src/modules/identity/verification-request/verification-request.model";

// @ts-ignore

import { AccreditationStatus } from "../src/modules/investor/accreditation-status.model";

// @ts-ignore

import { InvestorType } from "../src/modules/investor/investor-type.model";

// @ts-ignore

import { Perk } from "../src/modules/perks/perk/perk.model";

// @ts-ignore

import { PerkCategory } from "../src/modules/perks/perk-category/perk-category.model";

// @ts-ignore

import { PitchMeetingFeedback } from "../src/modules/pitches/pitch-meeting-feedback/pitch-meeting-feedback.model";

// @ts-ignore

import { PitchWrittenFeedback } from "../src/modules/pitches/pitch-written-feedback/pitch-written-feedback.model";

// @ts-ignore

import { StripeWebhookEvent } from "../src/modules/stripe/stripe-webhook-event/stripe-webhook-event.model";

// @ts-ignore

import { Subscription } from "../src/modules/subscriptions/subscription/subscription.model";

// @ts-ignore

import { SuggestedResource } from "../src/modules/suggested-resources/suggested-resource/suggested-resource.model";

// @ts-ignore

import { SuggestedResourceCategory } from "../src/modules/suggested-resources/suggested-resource-category/suggested-resource-category.model";

export enum UserRoleOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(UserRoleOrderByEnum, {
  name: "UserRoleOrderByInput"
});

@TypeGraphQLInputType()
export class UserRoleWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserRoleWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class UserRoleCreateInput {
  @TypeGraphQLField(() => ID)
  userId!: string;

  @TypeGraphQLField(() => ID)
  roleId!: string;

  @TypeGraphQLField({ nullable: true })
  organization?: string;
}

@TypeGraphQLInputType()
export class UserRoleUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId?: string;

  @TypeGraphQLField({ nullable: true })
  organization?: string;
}

@ArgsType()
export class UserRoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserRoleWhereInput, { nullable: true })
  where?: UserRoleWhereInput;

  @TypeGraphQLField(() => UserRoleOrderByEnum, { nullable: true })
  orderBy?: UserRoleOrderByEnum;
}

@ArgsType()
export class UserRoleCreateManyArgs {
  @TypeGraphQLField(() => [UserRoleCreateInput])
  data!: UserRoleCreateInput[];
}

@ArgsType()
export class UserRoleUpdateArgs {
  @TypeGraphQLField() data!: UserRoleUpdateInput;
  @TypeGraphQLField() where!: UserRoleWhereUniqueInput;
}

export enum RoleOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(RoleOrderByEnum, {
  name: "RoleOrderByInput"
});

@TypeGraphQLInputType()
export class RoleWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class RoleWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  code?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class RoleCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  code!: string;
}

@TypeGraphQLInputType()
export class RoleUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  code?: string;
}

@ArgsType()
export class RoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RoleWhereInput, { nullable: true })
  where?: RoleWhereInput;

  @TypeGraphQLField(() => RoleOrderByEnum, { nullable: true })
  orderBy?: RoleOrderByEnum;
}

@ArgsType()
export class RoleCreateManyArgs {
  @TypeGraphQLField(() => [RoleCreateInput])
  data!: RoleCreateInput[];
}

@ArgsType()
export class RoleUpdateArgs {
  @TypeGraphQLField() data!: RoleUpdateInput;
  @TypeGraphQLField() where!: RoleWhereUniqueInput;
}

export enum RolePermissionOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(RolePermissionOrderByEnum, {
  name: "RolePermissionOrderByInput"
});

@TypeGraphQLInputType()
export class RolePermissionWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  permissionId_eq?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class RolePermissionWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  permissionId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class RolePermissionCreateInput {
  @TypeGraphQLField(() => ID)
  permissionId!: string;

  @TypeGraphQLField(() => ID)
  roleId!: string;
}

@TypeGraphQLInputType()
export class RolePermissionUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  permissionId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  roleId?: string;
}

@ArgsType()
export class RolePermissionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RolePermissionWhereInput, { nullable: true })
  where?: RolePermissionWhereInput;

  @TypeGraphQLField(() => RolePermissionOrderByEnum, { nullable: true })
  orderBy?: RolePermissionOrderByEnum;
}

@ArgsType()
export class RolePermissionCreateManyArgs {
  @TypeGraphQLField(() => [RolePermissionCreateInput])
  data!: RolePermissionCreateInput[];
}

@ArgsType()
export class RolePermissionUpdateArgs {
  @TypeGraphQLField() data!: RolePermissionUpdateInput;
  @TypeGraphQLField() where!: RolePermissionWhereUniqueInput;
}

export enum PermissionOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PermissionOrderByEnum, {
  name: "PermissionOrderByInput"
});

@TypeGraphQLInputType()
export class PermissionWhereInput {
  @TypeGraphQLField({ nullable: true })
  code_eq?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  code_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PermissionWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  code?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class PermissionCreateInput {
  @TypeGraphQLField()
  code!: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;
}

@TypeGraphQLInputType()
export class PermissionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  code?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;
}

@ArgsType()
export class PermissionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PermissionWhereInput, { nullable: true })
  where?: PermissionWhereInput;

  @TypeGraphQLField(() => PermissionOrderByEnum, { nullable: true })
  orderBy?: PermissionOrderByEnum;
}

@ArgsType()
export class PermissionCreateManyArgs {
  @TypeGraphQLField(() => [PermissionCreateInput])
  data!: PermissionCreateInput[];
}

@ArgsType()
export class PermissionUpdateArgs {
  @TypeGraphQLField() data!: PermissionUpdateInput;
  @TypeGraphQLField() where!: PermissionWhereUniqueInput;
}

export enum CalendlyWebhookEventOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CalendlyWebhookEventOrderByEnum, {
  name: "CalendlyWebhookEventOrderByInput"
});

@TypeGraphQLInputType()
export class CalendlyWebhookEventWhereInput {
  @TypeGraphQLField(() => CalendlyWebhookEventStatus, { nullable: true })
  status_eq?: CalendlyWebhookEventStatus;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CalendlyWebhookEventWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CalendlyWebhookEventCreateInput {
  @TypeGraphQLField()
  type!: string;

  @TypeGraphQLField(() => GraphQLJSONObject)
  raw!: JsonObject;
}

@TypeGraphQLInputType()
export class CalendlyWebhookEventUpdateInput {
  @TypeGraphQLField({ nullable: true })
  type?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw?: JsonObject;
}

@ArgsType()
export class CalendlyWebhookEventWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CalendlyWebhookEventWhereInput, { nullable: true })
  where?: CalendlyWebhookEventWhereInput;

  @TypeGraphQLField(() => CalendlyWebhookEventOrderByEnum, { nullable: true })
  orderBy?: CalendlyWebhookEventOrderByEnum;
}

@ArgsType()
export class CalendlyWebhookEventCreateManyArgs {
  @TypeGraphQLField(() => [CalendlyWebhookEventCreateInput])
  data!: CalendlyWebhookEventCreateInput[];
}

@ArgsType()
export class CalendlyWebhookEventUpdateArgs {
  @TypeGraphQLField() data!: CalendlyWebhookEventUpdateInput;
  @TypeGraphQLField() where!: CalendlyWebhookEventWhereUniqueInput;
}

export enum EventTypeOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(EventTypeOrderByEnum, {
  name: "EventTypeOrderByInput"
});

@TypeGraphQLInputType()
export class EventTypeWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class EventTypeWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  name?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class EventTypeCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField({ nullable: true })
  template?: string;

  @TypeGraphQLField()
  allowSubscription!: boolean;
}

@TypeGraphQLInputType()
export class EventTypeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  template?: string;

  @TypeGraphQLField({ nullable: true })
  allowSubscription?: boolean;
}

@ArgsType()
export class EventTypeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EventTypeWhereInput, { nullable: true })
  where?: EventTypeWhereInput;

  @TypeGraphQLField(() => EventTypeOrderByEnum, { nullable: true })
  orderBy?: EventTypeOrderByEnum;
}

@ArgsType()
export class EventTypeCreateManyArgs {
  @TypeGraphQLField(() => [EventTypeCreateInput])
  data!: EventTypeCreateInput[];
}

@ArgsType()
export class EventTypeUpdateArgs {
  @TypeGraphQLField() data!: EventTypeUpdateInput;
  @TypeGraphQLField() where!: EventTypeWhereUniqueInput;
}

export enum EventOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(EventOrderByEnum, {
  name: "EventOrderByInput"
});

@TypeGraphQLInputType()
export class EventWhereInput {
  @TypeGraphQLField(() => EventStatus, { nullable: true })
  status_eq?: EventStatus;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  payload_json?: JsonObject;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class EventWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EventCreateInput {
  @TypeGraphQLField()
  type!: string;

  @TypeGraphQLField(() => EventStatus)
  status!: EventStatus;

  @TypeGraphQLField({ nullable: true })
  statusMessage?: string;

  @TypeGraphQLField()
  objectType!: string;

  @TypeGraphQLField(() => ID)
  objectId!: string;

  @TypeGraphQLField()
  ownerId!: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  payload?: JsonObject;
}

@TypeGraphQLInputType()
export class EventUpdateInput {
  @TypeGraphQLField({ nullable: true })
  type?: string;

  @TypeGraphQLField(() => EventStatus, { nullable: true })
  status?: EventStatus;

  @TypeGraphQLField({ nullable: true })
  statusMessage?: string;

  @TypeGraphQLField({ nullable: true })
  objectType?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  objectId?: string;

  @TypeGraphQLField({ nullable: true })
  ownerId?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  payload?: JsonObject;
}

@ArgsType()
export class EventWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EventWhereInput, { nullable: true })
  where?: EventWhereInput;

  @TypeGraphQLField(() => EventOrderByEnum, { nullable: true })
  orderBy?: EventOrderByEnum;
}

@ArgsType()
export class EventCreateManyArgs {
  @TypeGraphQLField(() => [EventCreateInput])
  data!: EventCreateInput[];
}

@ArgsType()
export class EventUpdateArgs {
  @TypeGraphQLField() data!: EventUpdateInput;
  @TypeGraphQLField() where!: EventWhereUniqueInput;
}

export enum ConversationOrderByEnum {
  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC"
}

registerEnumType(ConversationOrderByEnum, {
  name: "ConversationOrderByInput"
});

@TypeGraphQLInputType()
export class ConversationWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class ConversationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ConversationCreateInput {
  @TypeGraphQLField({ nullable: true })
  friendlyName?: string;
}

@TypeGraphQLInputType()
export class ConversationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  friendlyName?: string;
}

@ArgsType()
export class ConversationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ConversationWhereInput, { nullable: true })
  where?: ConversationWhereInput;

  @TypeGraphQLField(() => ConversationOrderByEnum, { nullable: true })
  orderBy?: ConversationOrderByEnum;
}

@ArgsType()
export class ConversationCreateManyArgs {
  @TypeGraphQLField(() => [ConversationCreateInput])
  data!: ConversationCreateInput[];
}

@ArgsType()
export class ConversationUpdateArgs {
  @TypeGraphQLField() data!: ConversationUpdateInput;
  @TypeGraphQLField() where!: ConversationWhereUniqueInput;
}

export enum ConversationParticipantOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(ConversationParticipantOrderByEnum, {
  name: "ConversationParticipantOrderByInput"
});

@TypeGraphQLInputType()
export class ConversationParticipantWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class ConversationParticipantWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ConversationParticipantCreateInput {
  @TypeGraphQLField(() => ID)
  conversationId!: string;

  @TypeGraphQLField(() => ID)
  userId!: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  lastReadAt?: Date;
}

@TypeGraphQLInputType()
export class ConversationParticipantUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  conversationId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  lastReadAt?: Date;
}

@ArgsType()
export class ConversationParticipantWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ConversationParticipantWhereInput, { nullable: true })
  where?: ConversationParticipantWhereInput;

  @TypeGraphQLField(() => ConversationParticipantOrderByEnum, {
    nullable: true
  })
  orderBy?: ConversationParticipantOrderByEnum;
}

@ArgsType()
export class ConversationParticipantCreateManyArgs {
  @TypeGraphQLField(() => [ConversationParticipantCreateInput])
  data!: ConversationParticipantCreateInput[];
}

@ArgsType()
export class ConversationParticipantUpdateArgs {
  @TypeGraphQLField() data!: ConversationParticipantUpdateInput;
  @TypeGraphQLField() where!: ConversationParticipantWhereUniqueInput;
}

export enum ExternalSystemIdOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(ExternalSystemIdOrderByEnum, {
  name: "ExternalSystemIdOrderByInput"
});

@TypeGraphQLInputType()
export class ExternalSystemIdWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class ExternalSystemIdWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ExternalSystemIdCreateInput {
  @TypeGraphQLField()
  externalSystemId!: string;

  @TypeGraphQLField(() => ExternalSystemType)
  externalSystemName!: ExternalSystemType;
}

@TypeGraphQLInputType()
export class ExternalSystemIdUpdateInput {
  @TypeGraphQLField({ nullable: true })
  externalSystemId?: string;

  @TypeGraphQLField(() => ExternalSystemType, { nullable: true })
  externalSystemName?: ExternalSystemType;
}

@ArgsType()
export class ExternalSystemIdWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ExternalSystemIdWhereInput, { nullable: true })
  where?: ExternalSystemIdWhereInput;

  @TypeGraphQLField(() => ExternalSystemIdOrderByEnum, { nullable: true })
  orderBy?: ExternalSystemIdOrderByEnum;
}

@ArgsType()
export class ExternalSystemIdCreateManyArgs {
  @TypeGraphQLField(() => [ExternalSystemIdCreateInput])
  data!: ExternalSystemIdCreateInput[];
}

@ArgsType()
export class ExternalSystemIdUpdateArgs {
  @TypeGraphQLField() data!: ExternalSystemIdUpdateInput;
  @TypeGraphQLField() where!: ExternalSystemIdWhereUniqueInput;
}

export enum FileOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(FileOrderByEnum, {
  name: "FileOrderByInput"
});

@TypeGraphQLInputType()
export class FileWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class FileWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FileCreateInput {
  @TypeGraphQLField()
  url!: string;
}

@TypeGraphQLInputType()
export class FileUpdateInput {
  @TypeGraphQLField({ nullable: true })
  url?: string;
}

@ArgsType()
export class FileWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FileWhereInput, { nullable: true })
  where?: FileWhereInput;

  @TypeGraphQLField(() => FileOrderByEnum, { nullable: true })
  orderBy?: FileOrderByEnum;
}

@ArgsType()
export class FileCreateManyArgs {
  @TypeGraphQLField(() => [FileCreateInput])
  data!: FileCreateInput[];
}

@ArgsType()
export class FileUpdateArgs {
  @TypeGraphQLField() data!: FileUpdateInput;
  @TypeGraphQLField() where!: FileWhereUniqueInput;
}

export enum FounderProfileOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(FounderProfileOrderByEnum, {
  name: "FounderProfileOrderByInput"
});

@TypeGraphQLInputType()
export class FounderProfileWhereInput {
  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industry_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industry_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industry_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyRoles_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyRoles_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyRoles_containsAny?: [string];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class FounderProfileWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class FounderProfileCreateInput {
  @TypeGraphQLField()
  stateProvince!: string;

  @TypeGraphQLField({ nullable: true })
  twitterUrl?: string;

  @TypeGraphQLField({ nullable: true })
  linkedinUrl?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities?: string[];

  @TypeGraphQLField({ nullable: true })
  gender?: string;

  @TypeGraphQLField({ nullable: true })
  sexualOrientation?: string;

  @TypeGraphQLField({ nullable: true })
  companyStage?: string;

  @TypeGraphQLField({ nullable: true })
  fundingStatus?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  industry?: string[];

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  transgender?: string;

  @TypeGraphQLField({ nullable: true })
  disability?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  companyRoles?: string[];

  @TypeGraphQLField({ nullable: true })
  workingStatus?: string;

  @TypeGraphQLField({ nullable: true })
  pronouns?: string;

  @TypeGraphQLField({ nullable: true })
  source?: string;

  @TypeGraphQLField({ nullable: true })
  bubbleLocation?: string;
}

@TypeGraphQLInputType()
export class FounderProfileUpdateInput {
  @TypeGraphQLField({ nullable: true })
  stateProvince?: string;

  @TypeGraphQLField({ nullable: true })
  twitterUrl?: string;

  @TypeGraphQLField({ nullable: true })
  linkedinUrl?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities?: string[];

  @TypeGraphQLField({ nullable: true })
  gender?: string;

  @TypeGraphQLField({ nullable: true })
  sexualOrientation?: string;

  @TypeGraphQLField({ nullable: true })
  companyStage?: string;

  @TypeGraphQLField({ nullable: true })
  fundingStatus?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  industry?: string[];

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  transgender?: string;

  @TypeGraphQLField({ nullable: true })
  disability?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  companyRoles?: string[];

  @TypeGraphQLField({ nullable: true })
  workingStatus?: string;

  @TypeGraphQLField({ nullable: true })
  pronouns?: string;

  @TypeGraphQLField({ nullable: true })
  source?: string;

  @TypeGraphQLField({ nullable: true })
  bubbleLocation?: string;
}

@ArgsType()
export class FounderProfileWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FounderProfileWhereInput, { nullable: true })
  where?: FounderProfileWhereInput;

  @TypeGraphQLField(() => FounderProfileOrderByEnum, { nullable: true })
  orderBy?: FounderProfileOrderByEnum;
}

@ArgsType()
export class FounderProfileCreateManyArgs {
  @TypeGraphQLField(() => [FounderProfileCreateInput])
  data!: FounderProfileCreateInput[];
}

@ArgsType()
export class FounderProfileUpdateArgs {
  @TypeGraphQLField() data!: FounderProfileUpdateInput;
  @TypeGraphQLField() where!: FounderProfileWhereUniqueInput;
}

export enum UserPlanRegistrationOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(UserPlanRegistrationOrderByEnum, {
  name: "UserPlanRegistrationOrderByInput"
});

@TypeGraphQLInputType()
export class UserPlanRegistrationWhereInput {
  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw_json?: JsonObject;

  @TypeGraphQLField(() => UserPlanRegistrationStatus, { nullable: true })
  status_eq?: UserPlanRegistrationStatus;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserPlanRegistrationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UserPlanRegistrationCreateInput {
  @TypeGraphQLField()
  email!: string;

  @TypeGraphQLField()
  fullName!: string;

  @TypeGraphQLField()
  stripeSubscriptionId!: string;

  @TypeGraphQLField()
  stripePlanId!: string;

  @TypeGraphQLField()
  userType!: string;

  @TypeGraphQLField(() => GraphQLJSONObject)
  raw!: JsonObject;
}

@TypeGraphQLInputType()
export class UserPlanRegistrationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  fullName?: string;

  @TypeGraphQLField({ nullable: true })
  stripeSubscriptionId?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanId?: string;

  @TypeGraphQLField({ nullable: true })
  userType?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw?: JsonObject;
}

@ArgsType()
export class UserPlanRegistrationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserPlanRegistrationWhereInput, { nullable: true })
  where?: UserPlanRegistrationWhereInput;

  @TypeGraphQLField(() => UserPlanRegistrationOrderByEnum, { nullable: true })
  orderBy?: UserPlanRegistrationOrderByEnum;
}

@ArgsType()
export class UserPlanRegistrationCreateManyArgs {
  @TypeGraphQLField(() => [UserPlanRegistrationCreateInput])
  data!: UserPlanRegistrationCreateInput[];
}

@ArgsType()
export class UserPlanRegistrationUpdateArgs {
  @TypeGraphQLField() data!: UserPlanRegistrationUpdateInput;
  @TypeGraphQLField() where!: UserPlanRegistrationWhereUniqueInput;
}

export enum InvestorProfileOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(InvestorProfileOrderByEnum, {
  name: "InvestorProfileOrderByInput"
});

@TypeGraphQLInputType()
export class InvestorProfileWhereInput {
  @TypeGraphQLField({ nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  accreditationStatuses_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  accreditationStatuses_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  accreditationStatuses_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  investorTypes_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  investorTypes_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  investorTypes_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  criteria_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  criteria_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  criteria_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  demographics_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  demographics_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  demographics_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyStages_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyStages_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  companyStages_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  fundingStatuses_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  fundingStatuses_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  fundingStatuses_containsAny?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  revenues_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  revenues_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  revenues_containsAny?: [string];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class InvestorProfileWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class InvestorProfileCreateInput {
  @TypeGraphQLField(() => [String])
  accreditationStatuses!: string[];

  @TypeGraphQLField({ nullable: true })
  linkedinUrl?: string;

  @TypeGraphQLField(() => [String])
  investorTypes!: string[];

  @TypeGraphQLField({ nullable: true })
  thesis?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  criteria?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities?: string[];

  @TypeGraphQLField({ nullable: true })
  gender?: string;

  @TypeGraphQLField({ nullable: true })
  pronouns?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  industries?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  demographics?: string[];

  @TypeGraphQLField({ nullable: true })
  stateProvince?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  companyStages?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  fundingStatuses?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  revenues?: string[];

  @TypeGraphQLField({ nullable: true })
  source?: string;
}

@TypeGraphQLInputType()
export class InvestorProfileUpdateInput {
  @TypeGraphQLField(() => [String], { nullable: true })
  accreditationStatuses?: string[];

  @TypeGraphQLField({ nullable: true })
  linkedinUrl?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  investorTypes?: string[];

  @TypeGraphQLField({ nullable: true })
  thesis?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  criteria?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  ethnicities?: string[];

  @TypeGraphQLField({ nullable: true })
  gender?: string;

  @TypeGraphQLField({ nullable: true })
  pronouns?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  industries?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  demographics?: string[];

  @TypeGraphQLField({ nullable: true })
  stateProvince?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  companyStages?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  fundingStatuses?: string[];

  @TypeGraphQLField(() => [String], { nullable: true })
  revenues?: string[];

  @TypeGraphQLField({ nullable: true })
  source?: string;
}

@ArgsType()
export class InvestorProfileWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => InvestorProfileWhereInput, { nullable: true })
  where?: InvestorProfileWhereInput;

  @TypeGraphQLField(() => InvestorProfileOrderByEnum, { nullable: true })
  orderBy?: InvestorProfileOrderByEnum;
}

@ArgsType()
export class InvestorProfileCreateManyArgs {
  @TypeGraphQLField(() => [InvestorProfileCreateInput])
  data!: InvestorProfileCreateInput[];
}

@ArgsType()
export class InvestorProfileUpdateArgs {
  @TypeGraphQLField() data!: InvestorProfileUpdateInput;
  @TypeGraphQLField() where!: InvestorProfileWhereUniqueInput;
}

export enum CourseProductOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CourseProductOrderByEnum, {
  name: "CourseProductOrderByInput"
});

@TypeGraphQLInputType()
export class CourseProductWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  courseId_eq?: string;

  @TypeGraphQLField(() => CourseProductStatus, { nullable: true })
  status_eq?: CourseProductStatus;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseProductWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseProductCreateInput {
  @TypeGraphQLField(() => ID)
  courseId!: string;

  @TypeGraphQLField(() => ID)
  productId!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  objectId?: string;
}

@TypeGraphQLInputType()
export class CourseProductUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  courseId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  productId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  objectId?: string;

  @TypeGraphQLField(() => CourseProductStatus, { nullable: true })
  status?: CourseProductStatus;
}

@ArgsType()
export class CourseProductWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseProductWhereInput, { nullable: true })
  where?: CourseProductWhereInput;

  @TypeGraphQLField(() => CourseProductOrderByEnum, { nullable: true })
  orderBy?: CourseProductOrderByEnum;
}

@ArgsType()
export class CourseProductCreateManyArgs {
  @TypeGraphQLField(() => [CourseProductCreateInput])
  data!: CourseProductCreateInput[];
}

@ArgsType()
export class CourseProductUpdateArgs {
  @TypeGraphQLField() data!: CourseProductUpdateInput;
  @TypeGraphQLField() where!: CourseProductWhereUniqueInput;
}

export enum ProductOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(ProductOrderByEnum, {
  name: "ProductOrderByInput"
});

@TypeGraphQLInputType()
export class ProductWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class ProductWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ProductCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  description!: string;
}

@TypeGraphQLInputType()
export class ProductUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;
}

@ArgsType()
export class ProductWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ProductWhereInput, { nullable: true })
  where?: ProductWhereInput;

  @TypeGraphQLField(() => ProductOrderByEnum, { nullable: true })
  orderBy?: ProductOrderByEnum;
}

@ArgsType()
export class ProductCreateManyArgs {
  @TypeGraphQLField(() => [ProductCreateInput])
  data!: ProductCreateInput[];
}

@ArgsType()
export class ProductUpdateArgs {
  @TypeGraphQLField() data!: ProductUpdateInput;
  @TypeGraphQLField() where!: ProductWhereUniqueInput;
}

export enum CourseDefinitionProductOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CourseDefinitionProductOrderByEnum, {
  name: "CourseDefinitionProductOrderByInput"
});

@TypeGraphQLInputType()
export class CourseDefinitionProductWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseDefinitionProductWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseDefinitionProductCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField(() => ID)
  courseDefinitionId!: string;

  @TypeGraphQLField(() => ID)
  productId!: string;
}

@TypeGraphQLInputType()
export class CourseDefinitionProductUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  courseDefinitionId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  productId?: string;
}

@ArgsType()
export class CourseDefinitionProductWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseDefinitionProductWhereInput, { nullable: true })
  where?: CourseDefinitionProductWhereInput;

  @TypeGraphQLField(() => CourseDefinitionProductOrderByEnum, {
    nullable: true
  })
  orderBy?: CourseDefinitionProductOrderByEnum;
}

@ArgsType()
export class CourseDefinitionProductCreateManyArgs {
  @TypeGraphQLField(() => [CourseDefinitionProductCreateInput])
  data!: CourseDefinitionProductCreateInput[];
}

@ArgsType()
export class CourseDefinitionProductUpdateArgs {
  @TypeGraphQLField() data!: CourseDefinitionProductUpdateInput;
  @TypeGraphQLField() where!: CourseDefinitionProductWhereUniqueInput;
}

export enum CourseStepDefinitionOrderByEnum {
  sequenceNum_ASC = "sequenceNum_ASC",
  sequenceNum_DESC = "sequenceNum_DESC"
}

registerEnumType(CourseStepDefinitionOrderByEnum, {
  name: "CourseStepDefinitionOrderByInput"
});

@TypeGraphQLInputType()
export class CourseStepDefinitionWhereInput {
  @TypeGraphQLField(() => Int, { nullable: true })
  sequenceNum_gt?: number;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  config_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseStepDefinitionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseStepDefinitionCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  section!: string;

  @TypeGraphQLField()
  sequenceNum!: number;

  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField({ nullable: true })
  eventType?: string;

  @TypeGraphQLField(() => CourseStepDefinitionType)
  type!: CourseStepDefinitionType;

  @TypeGraphQLField(() => GraphQLJSONObject)
  config!: JsonObject;

  @TypeGraphQLField(() => ID)
  courseDefinitionId!: string;
}

@TypeGraphQLInputType()
export class CourseStepDefinitionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  section?: string;

  @TypeGraphQLField({ nullable: true })
  sequenceNum?: number;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  eventType?: string;

  @TypeGraphQLField(() => CourseStepDefinitionType, { nullable: true })
  type?: CourseStepDefinitionType;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  config?: JsonObject;

  @TypeGraphQLField(() => ID, { nullable: true })
  courseDefinitionId?: string;
}

@ArgsType()
export class CourseStepDefinitionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseStepDefinitionWhereInput, { nullable: true })
  where?: CourseStepDefinitionWhereInput;

  @TypeGraphQLField(() => CourseStepDefinitionOrderByEnum, { nullable: true })
  orderBy?: CourseStepDefinitionOrderByEnum;
}

@ArgsType()
export class CourseStepDefinitionCreateManyArgs {
  @TypeGraphQLField(() => [CourseStepDefinitionCreateInput])
  data!: CourseStepDefinitionCreateInput[];
}

@ArgsType()
export class CourseStepDefinitionUpdateArgs {
  @TypeGraphQLField() data!: CourseStepDefinitionUpdateInput;
  @TypeGraphQLField() where!: CourseStepDefinitionWhereUniqueInput;
}

export enum CourseDefinitionOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CourseDefinitionOrderByEnum, {
  name: "CourseDefinitionOrderByInput"
});

@TypeGraphQLInputType()
export class CourseDefinitionWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseDefinitionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseDefinitionCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  description!: string;
}

@TypeGraphQLInputType()
export class CourseDefinitionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;
}

@ArgsType()
export class CourseDefinitionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseDefinitionWhereInput, { nullable: true })
  where?: CourseDefinitionWhereInput;

  @TypeGraphQLField(() => CourseDefinitionOrderByEnum, { nullable: true })
  orderBy?: CourseDefinitionOrderByEnum;
}

@ArgsType()
export class CourseDefinitionCreateManyArgs {
  @TypeGraphQLField(() => [CourseDefinitionCreateInput])
  data!: CourseDefinitionCreateInput[];
}

@ArgsType()
export class CourseDefinitionUpdateArgs {
  @TypeGraphQLField() data!: CourseDefinitionUpdateInput;
  @TypeGraphQLField() where!: CourseDefinitionWhereUniqueInput;
}

export enum CourseStepOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CourseStepOrderByEnum, {
  name: "CourseStepOrderByInput"
});

@TypeGraphQLInputType()
export class CourseStepWhereInput {
  @TypeGraphQLField(() => CourseStepStatus, { nullable: true })
  status_eq?: CourseStepStatus;

  @TypeGraphQLField(() => ID, { nullable: true })
  courseId_eq?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  courseStepDefinitionId_eq?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  data_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseStepWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseStepCreateInput {
  @TypeGraphQLField(() => ID)
  courseId!: string;

  @TypeGraphQLField(() => ID)
  courseStepDefinitionId!: string;

  @TypeGraphQLField(() => GraphQLJSONObject)
  data!: JsonObject;
}

@TypeGraphQLInputType()
export class CourseStepUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  courseId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  courseStepDefinitionId?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  data?: JsonObject;
}

@ArgsType()
export class CourseStepWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseStepWhereInput, { nullable: true })
  where?: CourseStepWhereInput;

  @TypeGraphQLField(() => CourseStepOrderByEnum, { nullable: true })
  orderBy?: CourseStepOrderByEnum;
}

@ArgsType()
export class CourseStepCreateManyArgs {
  @TypeGraphQLField(() => [CourseStepCreateInput])
  data!: CourseStepCreateInput[];
}

@ArgsType()
export class CourseStepUpdateArgs {
  @TypeGraphQLField() data!: CourseStepUpdateInput;
  @TypeGraphQLField() where!: CourseStepWhereUniqueInput;
}

export enum CourseOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CourseOrderByEnum, {
  name: "CourseOrderByInput"
});

@TypeGraphQLInputType()
export class CourseWhereInput {
  @TypeGraphQLField(() => CourseStatus, { nullable: true })
  status_eq?: CourseStatus;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CourseWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CourseCreateInput {
  @TypeGraphQLField(() => ID)
  courseDefinitionId!: string;
}

@TypeGraphQLInputType()
export class CourseUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  courseDefinitionId?: string;
}

@ArgsType()
export class CourseWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CourseWhereInput, { nullable: true })
  where?: CourseWhereInput;

  @TypeGraphQLField(() => CourseOrderByEnum, { nullable: true })
  orderBy?: CourseOrderByEnum;
}

@ArgsType()
export class CourseCreateManyArgs {
  @TypeGraphQLField(() => [CourseCreateInput])
  data!: CourseCreateInput[];
}

@ArgsType()
export class CourseUpdateArgs {
  @TypeGraphQLField() data!: CourseUpdateInput;
  @TypeGraphQLField() where!: CourseWhereUniqueInput;
}

export enum StartupOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(StartupOrderByEnum, {
  name: "StartupOrderByInput"
});

@TypeGraphQLInputType()
export class StartupWhereInput {
  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  industries_containsAny?: [string];

  @TypeGraphQLField({ nullable: true })
  organizationId_eq?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  organizationId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class StartupWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StartupCreateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  website?: string;

  @TypeGraphQLField({ nullable: true })
  corporateStructure?: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  stateProvince?: string;

  @TypeGraphQLField({ nullable: true })
  fundraiseStatus?: string;

  @TypeGraphQLField({ nullable: true })
  companyStage?: string;

  @TypeGraphQLField({ nullable: true })
  revenue?: string;

  @TypeGraphQLField(() => [String])
  industries!: string[];

  @TypeGraphQLField({ nullable: true })
  shortDescription?: string;

  @TypeGraphQLField({ nullable: true })
  originStory?: string;

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  deckComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  presentationComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  businessChallenge?: string;

  @TypeGraphQLField({ nullable: true })
  desiredSupport?: string;

  @TypeGraphQLField({ nullable: true })
  anythingElse?: string;

  @TypeGraphQLField({ nullable: true })
  additionalTeamMembers?: boolean;
}

@TypeGraphQLInputType()
export class StartupUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  website?: string;

  @TypeGraphQLField({ nullable: true })
  corporateStructure?: string;

  @TypeGraphQLField({ nullable: true })
  country?: string;

  @TypeGraphQLField({ nullable: true })
  stateProvince?: string;

  @TypeGraphQLField({ nullable: true })
  fundraiseStatus?: string;

  @TypeGraphQLField({ nullable: true })
  companyStage?: string;

  @TypeGraphQLField({ nullable: true })
  revenue?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  industries?: string[];

  @TypeGraphQLField({ nullable: true })
  shortDescription?: string;

  @TypeGraphQLField({ nullable: true })
  originStory?: string;

  @TypeGraphQLField({ nullable: true })
  tinyDescription?: string;

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  deckComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  presentationComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  businessChallenge?: string;

  @TypeGraphQLField({ nullable: true })
  desiredSupport?: string;

  @TypeGraphQLField({ nullable: true })
  anythingElse?: string;

  @TypeGraphQLField({ nullable: true })
  additionalTeamMembers?: boolean;
}

@ArgsType()
export class StartupWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StartupWhereInput, { nullable: true })
  where?: StartupWhereInput;

  @TypeGraphQLField(() => StartupOrderByEnum, { nullable: true })
  orderBy?: StartupOrderByEnum;
}

@ArgsType()
export class StartupCreateManyArgs {
  @TypeGraphQLField(() => [StartupCreateInput])
  data!: StartupCreateInput[];
}

@ArgsType()
export class StartupUpdateArgs {
  @TypeGraphQLField() data!: StartupUpdateInput;
  @TypeGraphQLField() where!: StartupWhereUniqueInput;
}

export enum OrganizationOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(OrganizationOrderByEnum, {
  name: "OrganizationOrderByInput"
});

@TypeGraphQLInputType()
export class OrganizationWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class OrganizationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class OrganizationCreateInput {
  @TypeGraphQLField(() => ID)
  userId!: string;

  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  website!: string;
}

@TypeGraphQLInputType()
export class OrganizationUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  website?: string;
}

@ArgsType()
export class OrganizationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => OrganizationWhereInput, { nullable: true })
  where?: OrganizationWhereInput;

  @TypeGraphQLField(() => OrganizationOrderByEnum, { nullable: true })
  orderBy?: OrganizationOrderByEnum;
}

@ArgsType()
export class OrganizationCreateManyArgs {
  @TypeGraphQLField(() => [OrganizationCreateInput])
  data!: OrganizationCreateInput[];
}

@ArgsType()
export class OrganizationUpdateArgs {
  @TypeGraphQLField() data!: OrganizationUpdateInput;
  @TypeGraphQLField() where!: OrganizationWhereUniqueInput;
}

export enum PitchDeckOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PitchDeckOrderByEnum, {
  name: "PitchDeckOrderByInput"
});

@TypeGraphQLInputType()
export class PitchDeckWhereInput {
  @TypeGraphQLField(() => PitchDeckStatus, { nullable: true })
  status_eq?: PitchDeckStatus;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  draft_eq?: Boolean;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  isCategorized_eq?: Boolean;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchDeckWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchDeckCreateInput {
  @TypeGraphQLField()
  draft!: boolean;

  @TypeGraphQLField()
  isCategorized!: boolean;

  @TypeGraphQLField()
  numPages!: number;

  @TypeGraphQLField(() => ID)
  pitchId!: string;
}

@TypeGraphQLInputType()
export class PitchDeckUpdateInput {
  @TypeGraphQLField({ nullable: true })
  draft?: boolean;

  @TypeGraphQLField({ nullable: true })
  isCategorized?: boolean;

  @TypeGraphQLField({ nullable: true })
  numPages?: number;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField(() => PitchDeckStatus, { nullable: true })
  status?: PitchDeckStatus;
}

@ArgsType()
export class PitchDeckWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchDeckWhereInput, { nullable: true })
  where?: PitchDeckWhereInput;

  @TypeGraphQLField(() => PitchDeckOrderByEnum, { nullable: true })
  orderBy?: PitchDeckOrderByEnum;
}

@ArgsType()
export class PitchDeckCreateManyArgs {
  @TypeGraphQLField(() => [PitchDeckCreateInput])
  data!: PitchDeckCreateInput[];
}

@ArgsType()
export class PitchDeckUpdateArgs {
  @TypeGraphQLField() data!: PitchDeckUpdateInput;
  @TypeGraphQLField() where!: PitchDeckWhereUniqueInput;
}

export enum PitchUpdateOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PitchUpdateOrderByEnum, {
  name: "PitchUpdateOrderByInput"
});

@TypeGraphQLInputType()
export class PitchUpdateWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchUpdateWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchUpdateCreateInput {
  @TypeGraphQLField()
  body!: string;

  @TypeGraphQLField(() => ID)
  pitchId!: string;
}

@TypeGraphQLInputType()
export class PitchUpdateUpdateInput {
  @TypeGraphQLField({ nullable: true })
  body?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;
}

@ArgsType()
export class PitchUpdateWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchUpdateWhereInput, { nullable: true })
  where?: PitchUpdateWhereInput;

  @TypeGraphQLField(() => PitchUpdateOrderByEnum, { nullable: true })
  orderBy?: PitchUpdateOrderByEnum;
}

@ArgsType()
export class PitchUpdateCreateManyArgs {
  @TypeGraphQLField(() => [PitchUpdateCreateInput])
  data!: PitchUpdateCreateInput[];
}

@ArgsType()
export class PitchUpdateUpdateArgs {
  @TypeGraphQLField() data!: PitchUpdateUpdateInput;
  @TypeGraphQLField() where!: PitchUpdateWhereUniqueInput;
}

export enum PitchUserStatusOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PitchUserStatusOrderByEnum, {
  name: "PitchUserStatusOrderByInput"
});

@TypeGraphQLInputType()
export class PitchUserStatusWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchUserStatusWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class PitchUserStatusCreateInput {
  @TypeGraphQLField(() => ID)
  pitchId!: string;

  @TypeGraphQLField(() => PitchWatchStatus)
  watchStatus!: PitchWatchStatus;

  @TypeGraphQLField(() => PitchListStatus)
  listStatus!: PitchListStatus;
}

@TypeGraphQLInputType()
export class PitchUserStatusUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField(() => PitchWatchStatus, { nullable: true })
  watchStatus?: PitchWatchStatus;

  @TypeGraphQLField(() => PitchListStatus, { nullable: true })
  listStatus?: PitchListStatus;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  notified?: Boolean;
}

@ArgsType()
export class PitchUserStatusWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchUserStatusWhereInput, { nullable: true })
  where?: PitchUserStatusWhereInput;

  @TypeGraphQLField(() => PitchUserStatusOrderByEnum, { nullable: true })
  orderBy?: PitchUserStatusOrderByEnum;
}

@ArgsType()
export class PitchUserStatusCreateManyArgs {
  @TypeGraphQLField(() => [PitchUserStatusCreateInput])
  data!: PitchUserStatusCreateInput[];
}

@ArgsType()
export class PitchUserStatusUpdateArgs {
  @TypeGraphQLField() data!: PitchUserStatusUpdateInput;
  @TypeGraphQLField() where!: PitchUserStatusWhereUniqueInput;
}

export enum VideoOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(VideoOrderByEnum, {
  name: "VideoOrderByInput"
});

@TypeGraphQLInputType()
export class VideoWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class VideoWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class VideoCreateInput {
  @TypeGraphQLField(() => ID)
  fileId!: string;
}

@TypeGraphQLInputType()
export class VideoUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  fileId?: string;
}

@ArgsType()
export class VideoWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => VideoWhereInput, { nullable: true })
  where?: VideoWhereInput;

  @TypeGraphQLField(() => VideoOrderByEnum, { nullable: true })
  orderBy?: VideoOrderByEnum;
}

@ArgsType()
export class VideoCreateManyArgs {
  @TypeGraphQLField(() => [VideoCreateInput])
  data!: VideoCreateInput[];
}

@ArgsType()
export class VideoUpdateArgs {
  @TypeGraphQLField() data!: VideoUpdateInput;
  @TypeGraphQLField() where!: VideoWhereUniqueInput;
}

export enum PitchVideoOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PitchVideoOrderByEnum, {
  name: "PitchVideoOrderByInput"
});

@TypeGraphQLInputType()
export class PitchVideoWhereInput {
  @TypeGraphQLField(() => PitchVideoStatus, { nullable: true })
  status_eq?: PitchVideoStatus;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  extendedVideo_eq?: Boolean;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchVideoWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchVideoCreateInput {
  @TypeGraphQLField()
  extendedVideo!: boolean;

  @TypeGraphQLField(() => ID)
  pitchId!: string;
}

@TypeGraphQLInputType()
export class PitchVideoUpdateInput {
  @TypeGraphQLField({ nullable: true })
  extendedVideo?: boolean;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField(() => PitchVideoStatus, { nullable: true })
  status?: PitchVideoStatus;
}

@ArgsType()
export class PitchVideoWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchVideoWhereInput, { nullable: true })
  where?: PitchVideoWhereInput;

  @TypeGraphQLField(() => PitchVideoOrderByEnum, { nullable: true })
  orderBy?: PitchVideoOrderByEnum;
}

@ArgsType()
export class PitchVideoCreateManyArgs {
  @TypeGraphQLField(() => [PitchVideoCreateInput])
  data!: PitchVideoCreateInput[];
}

@ArgsType()
export class PitchVideoUpdateArgs {
  @TypeGraphQLField() data!: PitchVideoUpdateInput;
  @TypeGraphQLField() where!: PitchVideoWhereUniqueInput;
}

export enum PitchOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  views_ASC = "views_ASC",
  views_DESC = "views_DESC",

  bookmarks_ASC = "bookmarks_ASC",
  bookmarks_DESC = "bookmarks_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC"
}

registerEnumType(PitchOrderByEnum, {
  name: "PitchOrderByInput"
});

@TypeGraphQLInputType()
export class PitchWhereInput {
  @TypeGraphQLField(() => PitchStatus, { nullable: true })
  status_eq?: PitchStatus;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  organizationId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  organizationId_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  ownerId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  ownerId_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  female_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  female_in?: Boolean[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  minority_eq?: Boolean;

  @TypeGraphQLField(() => [Boolean], { nullable: true })
  minority_in?: Boolean[];

  @TypeGraphQLField({ nullable: true })
  listStatus_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchCreateInput {
  @TypeGraphQLField({ nullable: true })
  shortDescription?: string;

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  deckComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  presentationComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  challenges?: string;

  @TypeGraphQLField({ nullable: true })
  listStatus?: string;
}

@TypeGraphQLInputType()
export class PitchUpdateInput {
  @TypeGraphQLField({ nullable: true })
  shortDescription?: string;

  @TypeGraphQLField({ nullable: true })
  presentationStatus?: string;

  @TypeGraphQLField({ nullable: true })
  deckComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  presentationComfortLevel?: number;

  @TypeGraphQLField({ nullable: true })
  challenges?: string;

  @TypeGraphQLField({ nullable: true })
  listStatus?: string;
}

@ArgsType()
export class PitchWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchWhereInput, { nullable: true })
  where?: PitchWhereInput;

  @TypeGraphQLField(() => PitchOrderByEnum, { nullable: true })
  orderBy?: PitchOrderByEnum;
}

@ArgsType()
export class PitchCreateManyArgs {
  @TypeGraphQLField(() => [PitchCreateInput])
  data!: PitchCreateInput[];
}

@ArgsType()
export class PitchUpdateArgs {
  @TypeGraphQLField() data!: PitchUpdateInput;
  @TypeGraphQLField() where!: PitchWhereUniqueInput;
}

export enum PitchCommentOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PitchCommentOrderByEnum, {
  name: "PitchCommentOrderByInput"
});

@TypeGraphQLInputType()
export class PitchCommentWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchCommentWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchCommentCreateInput {
  @TypeGraphQLField()
  body!: string;

  @TypeGraphQLField(() => ID)
  pitchId!: string;

  @TypeGraphQLField(() => PitchCommentVisibility)
  visibility!: PitchCommentVisibility;
}

@TypeGraphQLInputType()
export class PitchCommentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  body?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField(() => PitchCommentVisibility, { nullable: true })
  visibility?: PitchCommentVisibility;
}

@ArgsType()
export class PitchCommentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchCommentWhereInput, { nullable: true })
  where?: PitchCommentWhereInput;

  @TypeGraphQLField(() => PitchCommentOrderByEnum, { nullable: true })
  orderBy?: PitchCommentOrderByEnum;
}

@ArgsType()
export class PitchCommentCreateManyArgs {
  @TypeGraphQLField(() => [PitchCommentCreateInput])
  data!: PitchCommentCreateInput[];
}

@ArgsType()
export class PitchCommentUpdateArgs {
  @TypeGraphQLField() data!: PitchCommentUpdateInput;
  @TypeGraphQLField() where!: PitchCommentWhereUniqueInput;
}

export enum PlanOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PlanOrderByEnum, {
  name: "PlanOrderByInput"
});

@TypeGraphQLInputType()
export class PlanWhereInput {
  @TypeGraphQLField(() => PaymentStatus, { nullable: true })
  status_eq?: PaymentStatus;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PlanWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PlanCreateInput {
  @TypeGraphQLField()
  stripePlanId!: string;

  @TypeGraphQLField()
  stripePlanName!: string;

  @TypeGraphQLField()
  stripePlanDescription!: string;

  @TypeGraphQLField()
  stripePlanCurrency!: string;

  @TypeGraphQLField()
  stripePlanPrice!: number;

  @TypeGraphQLField()
  stripePlanPeriod!: string;

  @TypeGraphQLField()
  stripePlanSubscriptionId!: string;

  @TypeGraphQLField(() => PaymentStatus, { nullable: true })
  status?: PaymentStatus;

  @TypeGraphQLField(() => ID)
  userId!: string;
}

@TypeGraphQLInputType()
export class PlanUpdateInput {
  @TypeGraphQLField({ nullable: true })
  stripePlanId?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanName?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanDescription?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanCurrency?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanPrice?: number;

  @TypeGraphQLField({ nullable: true })
  stripePlanPeriod?: string;

  @TypeGraphQLField({ nullable: true })
  stripePlanSubscriptionId?: string;

  @TypeGraphQLField(() => PaymentStatus, { nullable: true })
  status?: PaymentStatus;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;
}

@ArgsType()
export class PlanWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PlanWhereInput, { nullable: true })
  where?: PlanWhereInput;

  @TypeGraphQLField(() => PlanOrderByEnum, { nullable: true })
  orderBy?: PlanOrderByEnum;
}

@ArgsType()
export class PlanCreateManyArgs {
  @TypeGraphQLField(() => [PlanCreateInput])
  data!: PlanCreateInput[];
}

@ArgsType()
export class PlanUpdateArgs {
  @TypeGraphQLField() data!: PlanUpdateInput;
  @TypeGraphQLField() where!: PlanWhereUniqueInput;
}

export enum UserOrderByEnum {
  lastLoginAt_ASC = "lastLoginAt_ASC",
  lastLoginAt_DESC = "lastLoginAt_DESC"
}

registerEnumType(UserOrderByEnum, {
  name: "UserOrderByInput"
});

@TypeGraphQLInputType()
export class UserWhereInput {
  @TypeGraphQLField(() => UserStatus, { nullable: true })
  status_eq?: UserStatus;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  email_eq?: string;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  isAccredited_eq?: Boolean;

  @TypeGraphQLField(() => Boolean, { nullable: true })
  migratedFromBubble_eq?: Boolean;

  @TypeGraphQLField(() => [String], { nullable: true })
  capabilities_containsAll?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  capabilities_containsNone?: [string];

  @TypeGraphQLField(() => [String], { nullable: true })
  capabilities_containsAny?: [string];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  email?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class UserCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  email!: string;

  @TypeGraphQLField(() => ID)
  profilePictureFileId!: string;

  @TypeGraphQLField({ nullable: true })
  stripeUserId?: string;

  @TypeGraphQLField({ nullable: true })
  isAccredited?: boolean;

  @TypeGraphQLField({ nullable: true })
  migratedFromBubble?: boolean;

  @TypeGraphQLField({ nullable: true })
  password?: string;
}

@TypeGraphQLInputType()
export class UserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  profilePictureFileId?: string;

  @TypeGraphQLField({ nullable: true })
  stripeUserId?: string;

  @TypeGraphQLField({ nullable: true })
  isAccredited?: boolean;

  @TypeGraphQLField({ nullable: true })
  migratedFromBubble?: boolean;

  @TypeGraphQLField({ nullable: true })
  password?: string;
}

@ArgsType()
export class UserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserWhereInput, { nullable: true })
  where?: UserWhereInput;

  @TypeGraphQLField(() => UserOrderByEnum, { nullable: true })
  orderBy?: UserOrderByEnum;
}

@ArgsType()
export class UserCreateManyArgs {
  @TypeGraphQLField(() => [UserCreateInput])
  data!: UserCreateInput[];
}

@ArgsType()
export class UserUpdateArgs {
  @TypeGraphQLField() data!: UserUpdateInput;
  @TypeGraphQLField() where!: UserWhereUniqueInput;
}

export enum ConversationMessageOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(ConversationMessageOrderByEnum, {
  name: "ConversationMessageOrderByInput"
});

@TypeGraphQLInputType()
export class ConversationMessageWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class ConversationMessageWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class ConversationMessageCreateInput {
  @TypeGraphQLField(() => ID)
  conversationId!: string;

  @TypeGraphQLField()
  body!: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  readAt?: Date;
}

@TypeGraphQLInputType()
export class ConversationMessageUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  conversationId?: string;

  @TypeGraphQLField({ nullable: true })
  body?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  readAt?: Date;
}

@ArgsType()
export class ConversationMessageWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ConversationMessageWhereInput, { nullable: true })
  where?: ConversationMessageWhereInput;

  @TypeGraphQLField(() => ConversationMessageOrderByEnum, { nullable: true })
  orderBy?: ConversationMessageOrderByEnum;
}

@ArgsType()
export class ConversationMessageCreateManyArgs {
  @TypeGraphQLField(() => [ConversationMessageCreateInput])
  data!: ConversationMessageCreateInput[];
}

@ArgsType()
export class ConversationMessageUpdateArgs {
  @TypeGraphQLField() data!: ConversationMessageUpdateInput;
  @TypeGraphQLField() where!: ConversationMessageWhereUniqueInput;
}

export enum CheckoutRequestOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CheckoutRequestOrderByEnum, {
  name: "CheckoutRequestOrderByInput"
});

@TypeGraphQLInputType()
export class CheckoutRequestWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CheckoutRequestWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CheckoutRequestCreateInput {
  @TypeGraphQLField()
  stripePlanId!: string;

  @TypeGraphQLField()
  successUrl!: string;

  @TypeGraphQLField()
  cancelUrl!: string;
}

@TypeGraphQLInputType()
export class CheckoutRequestUpdateInput {
  @TypeGraphQLField({ nullable: true })
  stripePlanId?: string;

  @TypeGraphQLField({ nullable: true })
  successUrl?: string;

  @TypeGraphQLField({ nullable: true })
  cancelUrl?: string;
}

@ArgsType()
export class CheckoutRequestWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CheckoutRequestWhereInput, { nullable: true })
  where?: CheckoutRequestWhereInput;

  @TypeGraphQLField(() => CheckoutRequestOrderByEnum, { nullable: true })
  orderBy?: CheckoutRequestOrderByEnum;
}

@ArgsType()
export class CheckoutRequestCreateManyArgs {
  @TypeGraphQLField(() => [CheckoutRequestCreateInput])
  data!: CheckoutRequestCreateInput[];
}

@ArgsType()
export class CheckoutRequestUpdateArgs {
  @TypeGraphQLField() data!: CheckoutRequestUpdateInput;
  @TypeGraphQLField() where!: CheckoutRequestWhereUniqueInput;
}

export enum CheckoutResponseOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CheckoutResponseOrderByEnum, {
  name: "CheckoutResponseOrderByInput"
});

@TypeGraphQLInputType()
export class CheckoutResponseWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class CheckoutResponseWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CheckoutResponseCreateInput {
  @TypeGraphQLField()
  stripeSessionId!: string;
}

@TypeGraphQLInputType()
export class CheckoutResponseUpdateInput {
  @TypeGraphQLField({ nullable: true })
  stripeSessionId?: string;
}

@ArgsType()
export class CheckoutResponseWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CheckoutResponseWhereInput, { nullable: true })
  where?: CheckoutResponseWhereInput;

  @TypeGraphQLField(() => CheckoutResponseOrderByEnum, { nullable: true })
  orderBy?: CheckoutResponseOrderByEnum;
}

@ArgsType()
export class CheckoutResponseCreateManyArgs {
  @TypeGraphQLField(() => [CheckoutResponseCreateInput])
  data!: CheckoutResponseCreateInput[];
}

@ArgsType()
export class CheckoutResponseUpdateArgs {
  @TypeGraphQLField() data!: CheckoutResponseUpdateInput;
  @TypeGraphQLField() where!: CheckoutResponseWhereUniqueInput;
}

export enum StateProvinceOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(StateProvinceOrderByEnum, {
  name: "StateProvinceOrderByInput"
});

@TypeGraphQLInputType()
export class StateProvinceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class StateProvinceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StateProvinceCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class StateProvinceUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class StateProvinceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StateProvinceWhereInput, { nullable: true })
  where?: StateProvinceWhereInput;

  @TypeGraphQLField(() => StateProvinceOrderByEnum, { nullable: true })
  orderBy?: StateProvinceOrderByEnum;
}

@ArgsType()
export class StateProvinceCreateManyArgs {
  @TypeGraphQLField(() => [StateProvinceCreateInput])
  data!: StateProvinceCreateInput[];
}

@ArgsType()
export class StateProvinceUpdateArgs {
  @TypeGraphQLField() data!: StateProvinceUpdateInput;
  @TypeGraphQLField() where!: StateProvinceWhereUniqueInput;
}

export enum CityOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CityOrderByEnum, {
  name: "CityOrderByInput"
});

@TypeGraphQLInputType()
export class CityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CityCreateInput {
  @TypeGraphQLField({ nullable: true })
  lat?: number;

  @TypeGraphQLField({ nullable: true })
  lon?: number;

  @TypeGraphQLField({ nullable: true })
  population?: number;

  @TypeGraphQLField(() => ID)
  stateProvinceId!: string;

  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  lat?: number;

  @TypeGraphQLField({ nullable: true })
  lon?: number;

  @TypeGraphQLField({ nullable: true })
  population?: number;

  @TypeGraphQLField(() => ID, { nullable: true })
  stateProvinceId?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CityWhereInput, { nullable: true })
  where?: CityWhereInput;

  @TypeGraphQLField(() => CityOrderByEnum, { nullable: true })
  orderBy?: CityOrderByEnum;
}

@ArgsType()
export class CityCreateManyArgs {
  @TypeGraphQLField(() => [CityCreateInput])
  data!: CityCreateInput[];
}

@ArgsType()
export class CityUpdateArgs {
  @TypeGraphQLField() data!: CityUpdateInput;
  @TypeGraphQLField() where!: CityWhereUniqueInput;
}

export enum CompanyRoleOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CompanyRoleOrderByEnum, {
  name: "CompanyRoleOrderByInput"
});

@TypeGraphQLInputType()
export class CompanyRoleWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CompanyRoleWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CompanyRoleCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CompanyRoleUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CompanyRoleWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CompanyRoleWhereInput, { nullable: true })
  where?: CompanyRoleWhereInput;

  @TypeGraphQLField(() => CompanyRoleOrderByEnum, { nullable: true })
  orderBy?: CompanyRoleOrderByEnum;
}

@ArgsType()
export class CompanyRoleCreateManyArgs {
  @TypeGraphQLField(() => [CompanyRoleCreateInput])
  data!: CompanyRoleCreateInput[];
}

@ArgsType()
export class CompanyRoleUpdateArgs {
  @TypeGraphQLField() data!: CompanyRoleUpdateInput;
  @TypeGraphQLField() where!: CompanyRoleWhereUniqueInput;
}

export enum CorporateStructureOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CorporateStructureOrderByEnum, {
  name: "CorporateStructureOrderByInput"
});

@TypeGraphQLInputType()
export class CorporateStructureWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CorporateStructureWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CorporateStructureCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CorporateStructureUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CorporateStructureWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CorporateStructureWhereInput, { nullable: true })
  where?: CorporateStructureWhereInput;

  @TypeGraphQLField(() => CorporateStructureOrderByEnum, { nullable: true })
  orderBy?: CorporateStructureOrderByEnum;
}

@ArgsType()
export class CorporateStructureCreateManyArgs {
  @TypeGraphQLField(() => [CorporateStructureCreateInput])
  data!: CorporateStructureCreateInput[];
}

@ArgsType()
export class CorporateStructureUpdateArgs {
  @TypeGraphQLField() data!: CorporateStructureUpdateInput;
  @TypeGraphQLField() where!: CorporateStructureWhereUniqueInput;
}

export enum CountryOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CountryOrderByEnum, {
  name: "CountryOrderByInput"
});

@TypeGraphQLInputType()
export class CountryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CountryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CountryCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CountryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CountryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CountryWhereInput, { nullable: true })
  where?: CountryWhereInput;

  @TypeGraphQLField(() => CountryOrderByEnum, { nullable: true })
  orderBy?: CountryOrderByEnum;
}

@ArgsType()
export class CountryCreateManyArgs {
  @TypeGraphQLField(() => [CountryCreateInput])
  data!: CountryCreateInput[];
}

@ArgsType()
export class CountryUpdateArgs {
  @TypeGraphQLField() data!: CountryUpdateInput;
  @TypeGraphQLField() where!: CountryWhereUniqueInput;
}

export enum CriteriaOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CriteriaOrderByEnum, {
  name: "CriteriaOrderByInput"
});

@TypeGraphQLInputType()
export class CriteriaWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CriteriaWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CriteriaCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CriteriaUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CriteriaWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CriteriaWhereInput, { nullable: true })
  where?: CriteriaWhereInput;

  @TypeGraphQLField(() => CriteriaOrderByEnum, { nullable: true })
  orderBy?: CriteriaOrderByEnum;
}

@ArgsType()
export class CriteriaCreateManyArgs {
  @TypeGraphQLField(() => [CriteriaCreateInput])
  data!: CriteriaCreateInput[];
}

@ArgsType()
export class CriteriaUpdateArgs {
  @TypeGraphQLField() data!: CriteriaUpdateInput;
  @TypeGraphQLField() where!: CriteriaWhereUniqueInput;
}

export enum DisabilityOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(DisabilityOrderByEnum, {
  name: "DisabilityOrderByInput"
});

@TypeGraphQLInputType()
export class DisabilityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class DisabilityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class DisabilityCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class DisabilityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class DisabilityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => DisabilityWhereInput, { nullable: true })
  where?: DisabilityWhereInput;

  @TypeGraphQLField(() => DisabilityOrderByEnum, { nullable: true })
  orderBy?: DisabilityOrderByEnum;
}

@ArgsType()
export class DisabilityCreateManyArgs {
  @TypeGraphQLField(() => [DisabilityCreateInput])
  data!: DisabilityCreateInput[];
}

@ArgsType()
export class DisabilityUpdateArgs {
  @TypeGraphQLField() data!: DisabilityUpdateInput;
  @TypeGraphQLField() where!: DisabilityWhereUniqueInput;
}

export enum EthnicityOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(EthnicityOrderByEnum, {
  name: "EthnicityOrderByInput"
});

@TypeGraphQLInputType()
export class EthnicityWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class EthnicityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EthnicityCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class EthnicityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class EthnicityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EthnicityWhereInput, { nullable: true })
  where?: EthnicityWhereInput;

  @TypeGraphQLField(() => EthnicityOrderByEnum, { nullable: true })
  orderBy?: EthnicityOrderByEnum;
}

@ArgsType()
export class EthnicityCreateManyArgs {
  @TypeGraphQLField(() => [EthnicityCreateInput])
  data!: EthnicityCreateInput[];
}

@ArgsType()
export class EthnicityUpdateArgs {
  @TypeGraphQLField() data!: EthnicityUpdateInput;
  @TypeGraphQLField() where!: EthnicityWhereUniqueInput;
}

export enum GenderOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(GenderOrderByEnum, {
  name: "GenderOrderByInput"
});

@TypeGraphQLInputType()
export class GenderWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class GenderWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class GenderCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class GenderUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class GenderWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => GenderWhereInput, { nullable: true })
  where?: GenderWhereInput;

  @TypeGraphQLField(() => GenderOrderByEnum, { nullable: true })
  orderBy?: GenderOrderByEnum;
}

@ArgsType()
export class GenderCreateManyArgs {
  @TypeGraphQLField(() => [GenderCreateInput])
  data!: GenderCreateInput[];
}

@ArgsType()
export class GenderUpdateArgs {
  @TypeGraphQLField() data!: GenderUpdateInput;
  @TypeGraphQLField() where!: GenderWhereUniqueInput;
}

export enum PresentationStatusOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PresentationStatusOrderByEnum, {
  name: "PresentationStatusOrderByInput"
});

@TypeGraphQLInputType()
export class PresentationStatusWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class PresentationStatusWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PresentationStatusCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class PresentationStatusUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class PresentationStatusWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PresentationStatusWhereInput, { nullable: true })
  where?: PresentationStatusWhereInput;

  @TypeGraphQLField(() => PresentationStatusOrderByEnum, { nullable: true })
  orderBy?: PresentationStatusOrderByEnum;
}

@ArgsType()
export class PresentationStatusCreateManyArgs {
  @TypeGraphQLField(() => [PresentationStatusCreateInput])
  data!: PresentationStatusCreateInput[];
}

@ArgsType()
export class PresentationStatusUpdateArgs {
  @TypeGraphQLField() data!: PresentationStatusUpdateInput;
  @TypeGraphQLField() where!: PresentationStatusWhereUniqueInput;
}

export enum SexualOrientationOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(SexualOrientationOrderByEnum, {
  name: "SexualOrientationOrderByInput"
});

@TypeGraphQLInputType()
export class SexualOrientationWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class SexualOrientationWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SexualOrientationCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class SexualOrientationUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class SexualOrientationWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SexualOrientationWhereInput, { nullable: true })
  where?: SexualOrientationWhereInput;

  @TypeGraphQLField(() => SexualOrientationOrderByEnum, { nullable: true })
  orderBy?: SexualOrientationOrderByEnum;
}

@ArgsType()
export class SexualOrientationCreateManyArgs {
  @TypeGraphQLField(() => [SexualOrientationCreateInput])
  data!: SexualOrientationCreateInput[];
}

@ArgsType()
export class SexualOrientationUpdateArgs {
  @TypeGraphQLField() data!: SexualOrientationUpdateInput;
  @TypeGraphQLField() where!: SexualOrientationWhereUniqueInput;
}

export enum TransgenderOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(TransgenderOrderByEnum, {
  name: "TransgenderOrderByInput"
});

@TypeGraphQLInputType()
export class TransgenderWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class TransgenderWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class TransgenderCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class TransgenderUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class TransgenderWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => TransgenderWhereInput, { nullable: true })
  where?: TransgenderWhereInput;

  @TypeGraphQLField(() => TransgenderOrderByEnum, { nullable: true })
  orderBy?: TransgenderOrderByEnum;
}

@ArgsType()
export class TransgenderCreateManyArgs {
  @TypeGraphQLField(() => [TransgenderCreateInput])
  data!: TransgenderCreateInput[];
}

@ArgsType()
export class TransgenderUpdateArgs {
  @TypeGraphQLField() data!: TransgenderUpdateInput;
  @TypeGraphQLField() where!: TransgenderWhereUniqueInput;
}

export enum UserActivityOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(UserActivityOrderByEnum, {
  name: "UserActivityOrderByInput"
});

@TypeGraphQLInputType()
export class UserActivityWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserActivityWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UserActivityCreateInput {
  @TypeGraphQLField()
  eventType!: string;
}

@TypeGraphQLInputType()
export class UserActivityUpdateInput {
  @TypeGraphQLField({ nullable: true })
  eventType?: string;
}

@ArgsType()
export class UserActivityWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserActivityWhereInput, { nullable: true })
  where?: UserActivityWhereInput;

  @TypeGraphQLField(() => UserActivityOrderByEnum, { nullable: true })
  orderBy?: UserActivityOrderByEnum;
}

@ArgsType()
export class UserActivityCreateManyArgs {
  @TypeGraphQLField(() => [UserActivityCreateInput])
  data!: UserActivityCreateInput[];
}

@ArgsType()
export class UserActivityUpdateArgs {
  @TypeGraphQLField() data!: UserActivityUpdateInput;
  @TypeGraphQLField() where!: UserActivityWhereUniqueInput;
}

export enum WorkingStatusOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(WorkingStatusOrderByEnum, {
  name: "WorkingStatusOrderByInput"
});

@TypeGraphQLInputType()
export class WorkingStatusWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class WorkingStatusWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class WorkingStatusCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class WorkingStatusUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class WorkingStatusWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => WorkingStatusWhereInput, { nullable: true })
  where?: WorkingStatusWhereInput;

  @TypeGraphQLField(() => WorkingStatusOrderByEnum, { nullable: true })
  orderBy?: WorkingStatusOrderByEnum;
}

@ArgsType()
export class WorkingStatusCreateManyArgs {
  @TypeGraphQLField(() => [WorkingStatusCreateInput])
  data!: WorkingStatusCreateInput[];
}

@ArgsType()
export class WorkingStatusUpdateArgs {
  @TypeGraphQLField() data!: WorkingStatusUpdateInput;
  @TypeGraphQLField() where!: WorkingStatusWhereUniqueInput;
}

export enum CompanyStageOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(CompanyStageOrderByEnum, {
  name: "CompanyStageOrderByInput"
});

@TypeGraphQLInputType()
export class CompanyStageWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class CompanyStageWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class CompanyStageCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class CompanyStageUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class CompanyStageWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => CompanyStageWhereInput, { nullable: true })
  where?: CompanyStageWhereInput;

  @TypeGraphQLField(() => CompanyStageOrderByEnum, { nullable: true })
  orderBy?: CompanyStageOrderByEnum;
}

@ArgsType()
export class CompanyStageCreateManyArgs {
  @TypeGraphQLField(() => [CompanyStageCreateInput])
  data!: CompanyStageCreateInput[];
}

@ArgsType()
export class CompanyStageUpdateArgs {
  @TypeGraphQLField() data!: CompanyStageUpdateInput;
  @TypeGraphQLField() where!: CompanyStageWhereUniqueInput;
}

export enum FundingStatusOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(FundingStatusOrderByEnum, {
  name: "FundingStatusOrderByInput"
});

@TypeGraphQLInputType()
export class FundingStatusWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class FundingStatusWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FundingStatusCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class FundingStatusUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class FundingStatusWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FundingStatusWhereInput, { nullable: true })
  where?: FundingStatusWhereInput;

  @TypeGraphQLField(() => FundingStatusOrderByEnum, { nullable: true })
  orderBy?: FundingStatusOrderByEnum;
}

@ArgsType()
export class FundingStatusCreateManyArgs {
  @TypeGraphQLField(() => [FundingStatusCreateInput])
  data!: FundingStatusCreateInput[];
}

@ArgsType()
export class FundingStatusUpdateArgs {
  @TypeGraphQLField() data!: FundingStatusUpdateInput;
  @TypeGraphQLField() where!: FundingStatusWhereUniqueInput;
}

export enum IndustryOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(IndustryOrderByEnum, {
  name: "IndustryOrderByInput"
});

@TypeGraphQLInputType()
export class IndustryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class IndustryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class IndustryCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class IndustryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class IndustryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => IndustryWhereInput, { nullable: true })
  where?: IndustryWhereInput;

  @TypeGraphQLField(() => IndustryOrderByEnum, { nullable: true })
  orderBy?: IndustryOrderByEnum;
}

@ArgsType()
export class IndustryCreateManyArgs {
  @TypeGraphQLField(() => [IndustryCreateInput])
  data!: IndustryCreateInput[];
}

@ArgsType()
export class IndustryUpdateArgs {
  @TypeGraphQLField() data!: IndustryUpdateInput;
  @TypeGraphQLField() where!: IndustryWhereUniqueInput;
}

export enum PronounOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PronounOrderByEnum, {
  name: "PronounOrderByInput"
});

@TypeGraphQLInputType()
export class PronounWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class PronounWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PronounCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class PronounUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class PronounWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PronounWhereInput, { nullable: true })
  where?: PronounWhereInput;

  @TypeGraphQLField(() => PronounOrderByEnum, { nullable: true })
  orderBy?: PronounOrderByEnum;
}

@ArgsType()
export class PronounCreateManyArgs {
  @TypeGraphQLField(() => [PronounCreateInput])
  data!: PronounCreateInput[];
}

@ArgsType()
export class PronounUpdateArgs {
  @TypeGraphQLField() data!: PronounUpdateInput;
  @TypeGraphQLField() where!: PronounWhereUniqueInput;
}

export enum RevenueOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(RevenueOrderByEnum, {
  name: "RevenueOrderByInput"
});

@TypeGraphQLInputType()
export class RevenueWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class RevenueWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class RevenueCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class RevenueUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class RevenueWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => RevenueWhereInput, { nullable: true })
  where?: RevenueWhereInput;

  @TypeGraphQLField(() => RevenueOrderByEnum, { nullable: true })
  orderBy?: RevenueOrderByEnum;
}

@ArgsType()
export class RevenueCreateManyArgs {
  @TypeGraphQLField(() => [RevenueCreateInput])
  data!: RevenueCreateInput[];
}

@ArgsType()
export class RevenueUpdateArgs {
  @TypeGraphQLField() data!: RevenueUpdateInput;
  @TypeGraphQLField() where!: RevenueWhereUniqueInput;
}

export enum AuthAccountOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(AuthAccountOrderByEnum, {
  name: "AuthAccountOrderByInput"
});

@TypeGraphQLInputType()
export class AuthAccountWhereInput {
  @TypeGraphQLField({ nullable: true })
  providerId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  providerAccountId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class AuthAccountWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class AuthAccountCreateInput {
  @TypeGraphQLField(() => ID)
  userId!: string;

  @TypeGraphQLField()
  providerType!: string;

  @TypeGraphQLField()
  providerId!: string;

  @TypeGraphQLField()
  providerAccountId!: string;

  @TypeGraphQLField({ nullable: true })
  refreshToken?: string;

  @TypeGraphQLField({ nullable: true })
  accessToken?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  accessTokenExpires?: DateTimeString;
}

@TypeGraphQLInputType()
export class AuthAccountUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  providerType?: string;

  @TypeGraphQLField({ nullable: true })
  providerId?: string;

  @TypeGraphQLField({ nullable: true })
  providerAccountId?: string;

  @TypeGraphQLField({ nullable: true })
  refreshToken?: string;

  @TypeGraphQLField({ nullable: true })
  accessToken?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  accessTokenExpires?: DateTimeString;
}

@ArgsType()
export class AuthAccountWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AuthAccountWhereInput, { nullable: true })
  where?: AuthAccountWhereInput;

  @TypeGraphQLField(() => AuthAccountOrderByEnum, { nullable: true })
  orderBy?: AuthAccountOrderByEnum;
}

@ArgsType()
export class AuthAccountCreateManyArgs {
  @TypeGraphQLField(() => [AuthAccountCreateInput])
  data!: AuthAccountCreateInput[];
}

@ArgsType()
export class AuthAccountUpdateArgs {
  @TypeGraphQLField() data!: AuthAccountUpdateInput;
  @TypeGraphQLField() where!: AuthAccountWhereUniqueInput;
}

export enum PasswordResetOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PasswordResetOrderByEnum, {
  name: "PasswordResetOrderByInput"
});

@TypeGraphQLInputType()
export class PasswordResetWhereInput {
  @TypeGraphQLField(() => PasswordResetStatus, { nullable: true })
  status_eq?: PasswordResetStatus;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PasswordResetWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  token?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class PasswordResetCreateInput {
  @TypeGraphQLField()
  email!: string;
}

@TypeGraphQLInputType()
export class PasswordResetUpdateInput {
  @TypeGraphQLField({ nullable: true })
  email?: string;
}

@ArgsType()
export class PasswordResetWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PasswordResetWhereInput, { nullable: true })
  where?: PasswordResetWhereInput;

  @TypeGraphQLField(() => PasswordResetOrderByEnum, { nullable: true })
  orderBy?: PasswordResetOrderByEnum;
}

@ArgsType()
export class PasswordResetCreateManyArgs {
  @TypeGraphQLField(() => [PasswordResetCreateInput])
  data!: PasswordResetCreateInput[];
}

@ArgsType()
export class PasswordResetUpdateArgs {
  @TypeGraphQLField() data!: PasswordResetUpdateInput;
  @TypeGraphQLField() where!: PasswordResetWhereUniqueInput;
}

export enum SessionOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(SessionOrderByEnum, {
  name: "SessionOrderByInput"
});

@TypeGraphQLInputType()
export class SessionWhereInput {
  @TypeGraphQLField({ nullable: true })
  sessionToken_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class SessionWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  sessionToken?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  accessToken?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class SessionCreateInput {
  @TypeGraphQLField(() => ID)
  userId!: string;

  @TypeGraphQLField(() => DateTime)
  expires!: DateTimeString;

  @TypeGraphQLField()
  sessionToken!: string;

  @TypeGraphQLField()
  accessToken!: string;
}

@TypeGraphQLInputType()
export class SessionUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  expires?: DateTimeString;

  @TypeGraphQLField({ nullable: true })
  sessionToken?: string;

  @TypeGraphQLField({ nullable: true })
  accessToken?: string;
}

@ArgsType()
export class SessionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SessionWhereInput, { nullable: true })
  where?: SessionWhereInput;

  @TypeGraphQLField(() => SessionOrderByEnum, { nullable: true })
  orderBy?: SessionOrderByEnum;
}

@ArgsType()
export class SessionCreateManyArgs {
  @TypeGraphQLField(() => [SessionCreateInput])
  data!: SessionCreateInput[];
}

@ArgsType()
export class SessionUpdateArgs {
  @TypeGraphQLField() data!: SessionUpdateInput;
  @TypeGraphQLField() where!: SessionWhereUniqueInput;
}

export enum UserTypeOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(UserTypeOrderByEnum, {
  name: "UserTypeOrderByInput"
});

@TypeGraphQLInputType()
export class UserTypeWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserTypeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UserTypeCreateInput {
  @TypeGraphQLField()
  type!: string;

  @TypeGraphQLField(() => ID)
  defaultRoleId!: string;

  @TypeGraphQLField()
  allowedAtRegistration!: boolean;
}

@TypeGraphQLInputType()
export class UserTypeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  type?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  defaultRoleId?: string;

  @TypeGraphQLField({ nullable: true })
  allowedAtRegistration?: boolean;
}

@ArgsType()
export class UserTypeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserTypeWhereInput, { nullable: true })
  where?: UserTypeWhereInput;

  @TypeGraphQLField(() => UserTypeOrderByEnum, { nullable: true })
  orderBy?: UserTypeOrderByEnum;
}

@ArgsType()
export class UserTypeCreateManyArgs {
  @TypeGraphQLField(() => [UserTypeCreateInput])
  data!: UserTypeCreateInput[];
}

@ArgsType()
export class UserTypeUpdateArgs {
  @TypeGraphQLField() data!: UserTypeUpdateInput;
  @TypeGraphQLField() where!: UserTypeWhereUniqueInput;
}

export enum UserInviteOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(UserInviteOrderByEnum, {
  name: "UserInviteOrderByInput"
});

@TypeGraphQLInputType()
export class UserInviteWhereInput {
  @TypeGraphQLField(() => UserInviteStatus, { nullable: true })
  status_eq?: UserInviteStatus;

  @TypeGraphQLField({ nullable: true })
  email_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class UserInviteWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UserInviteCreateInput {
  @TypeGraphQLField()
  email!: string;

  @TypeGraphQLField()
  userType!: string;
}

@TypeGraphQLInputType()
export class UserInviteUpdateInput {
  @TypeGraphQLField({ nullable: true })
  email?: string;

  @TypeGraphQLField({ nullable: true })
  userType?: string;
}

@ArgsType()
export class UserInviteWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserInviteWhereInput, { nullable: true })
  where?: UserInviteWhereInput;

  @TypeGraphQLField(() => UserInviteOrderByEnum, { nullable: true })
  orderBy?: UserInviteOrderByEnum;
}

@ArgsType()
export class UserInviteCreateManyArgs {
  @TypeGraphQLField(() => [UserInviteCreateInput])
  data!: UserInviteCreateInput[];
}

@ArgsType()
export class UserInviteUpdateArgs {
  @TypeGraphQLField() data!: UserInviteUpdateInput;
  @TypeGraphQLField() where!: UserInviteWhereUniqueInput;
}

export enum VerificationRequestOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(VerificationRequestOrderByEnum, {
  name: "VerificationRequestOrderByInput"
});

@TypeGraphQLInputType()
export class VerificationRequestWhereInput {
  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class VerificationRequestWhereUniqueInput {
  @TypeGraphQLField(() => String, { nullable: true })
  token?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;
}

@TypeGraphQLInputType()
export class VerificationRequestCreateInput {
  @TypeGraphQLField()
  identifier!: string;

  @TypeGraphQLField()
  token!: string;

  @TypeGraphQLField(() => DateTime)
  expires!: DateTimeString;
}

@TypeGraphQLInputType()
export class VerificationRequestUpdateInput {
  @TypeGraphQLField({ nullable: true })
  identifier?: string;

  @TypeGraphQLField({ nullable: true })
  token?: string;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  expires?: DateTimeString;
}

@ArgsType()
export class VerificationRequestWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => VerificationRequestWhereInput, { nullable: true })
  where?: VerificationRequestWhereInput;

  @TypeGraphQLField(() => VerificationRequestOrderByEnum, { nullable: true })
  orderBy?: VerificationRequestOrderByEnum;
}

@ArgsType()
export class VerificationRequestCreateManyArgs {
  @TypeGraphQLField(() => [VerificationRequestCreateInput])
  data!: VerificationRequestCreateInput[];
}

@ArgsType()
export class VerificationRequestUpdateArgs {
  @TypeGraphQLField() data!: VerificationRequestUpdateInput;
  @TypeGraphQLField() where!: VerificationRequestWhereUniqueInput;
}

export enum AccreditationStatusOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(AccreditationStatusOrderByEnum, {
  name: "AccreditationStatusOrderByInput"
});

@TypeGraphQLInputType()
export class AccreditationStatusWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class AccreditationStatusWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class AccreditationStatusCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class AccreditationStatusUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class AccreditationStatusWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => AccreditationStatusWhereInput, { nullable: true })
  where?: AccreditationStatusWhereInput;

  @TypeGraphQLField(() => AccreditationStatusOrderByEnum, { nullable: true })
  orderBy?: AccreditationStatusOrderByEnum;
}

@ArgsType()
export class AccreditationStatusCreateManyArgs {
  @TypeGraphQLField(() => [AccreditationStatusCreateInput])
  data!: AccreditationStatusCreateInput[];
}

@ArgsType()
export class AccreditationStatusUpdateArgs {
  @TypeGraphQLField() data!: AccreditationStatusUpdateInput;
  @TypeGraphQLField() where!: AccreditationStatusWhereUniqueInput;
}

export enum InvestorTypeOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(InvestorTypeOrderByEnum, {
  name: "InvestorTypeOrderByInput"
});

@TypeGraphQLInputType()
export class InvestorTypeWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class InvestorTypeWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class InvestorTypeCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class InvestorTypeUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class InvestorTypeWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => InvestorTypeWhereInput, { nullable: true })
  where?: InvestorTypeWhereInput;

  @TypeGraphQLField(() => InvestorTypeOrderByEnum, { nullable: true })
  orderBy?: InvestorTypeOrderByEnum;
}

@ArgsType()
export class InvestorTypeCreateManyArgs {
  @TypeGraphQLField(() => [InvestorTypeCreateInput])
  data!: InvestorTypeCreateInput[];
}

@ArgsType()
export class InvestorTypeUpdateArgs {
  @TypeGraphQLField() data!: InvestorTypeUpdateInput;
  @TypeGraphQLField() where!: InvestorTypeWhereUniqueInput;
}

export enum PerkOrderByEnum {
  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC"
}

registerEnumType(PerkOrderByEnum, {
  name: "PerkOrderByInput"
});

@TypeGraphQLInputType()
export class PerkWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  perkCategoryId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PerkWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PerkCreateInput {
  @TypeGraphQLField()
  companyName!: string;

  @TypeGraphQLField()
  companyBio!: string;

  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField(() => ID)
  perkCategoryId!: string;

  @TypeGraphQLField()
  url!: string;

  @TypeGraphQLField(() => ID)
  logoFileId!: string;
}

@TypeGraphQLInputType()
export class PerkUpdateInput {
  @TypeGraphQLField({ nullable: true })
  companyName?: string;

  @TypeGraphQLField({ nullable: true })
  companyBio?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  perkCategoryId?: string;

  @TypeGraphQLField({ nullable: true })
  url?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  logoFileId?: string;
}

@ArgsType()
export class PerkWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PerkWhereInput, { nullable: true })
  where?: PerkWhereInput;

  @TypeGraphQLField(() => PerkOrderByEnum, { nullable: true })
  orderBy?: PerkOrderByEnum;
}

@ArgsType()
export class PerkCreateManyArgs {
  @TypeGraphQLField(() => [PerkCreateInput])
  data!: PerkCreateInput[];
}

@ArgsType()
export class PerkUpdateArgs {
  @TypeGraphQLField() data!: PerkUpdateInput;
  @TypeGraphQLField() where!: PerkWhereUniqueInput;
}

export enum PerkCategoryOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(PerkCategoryOrderByEnum, {
  name: "PerkCategoryOrderByInput"
});

@TypeGraphQLInputType()
export class PerkCategoryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class PerkCategoryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PerkCategoryCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class PerkCategoryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class PerkCategoryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PerkCategoryWhereInput, { nullable: true })
  where?: PerkCategoryWhereInput;

  @TypeGraphQLField(() => PerkCategoryOrderByEnum, { nullable: true })
  orderBy?: PerkCategoryOrderByEnum;
}

@ArgsType()
export class PerkCategoryCreateManyArgs {
  @TypeGraphQLField(() => [PerkCategoryCreateInput])
  data!: PerkCategoryCreateInput[];
}

@ArgsType()
export class PerkCategoryUpdateArgs {
  @TypeGraphQLField() data!: PerkCategoryUpdateInput;
  @TypeGraphQLField() where!: PerkCategoryWhereUniqueInput;
}

export enum PitchMeetingFeedbackOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC"
}

registerEnumType(PitchMeetingFeedbackOrderByEnum, {
  name: "PitchMeetingFeedbackOrderByInput"
});

@TypeGraphQLInputType()
export class PitchMeetingFeedbackWhereInput {
  @TypeGraphQLField(() => PitchMeetingFeedbackStatus, { nullable: true })
  status_eq?: PitchMeetingFeedbackStatus;

  @TypeGraphQLField({ nullable: true })
  courseProductId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchMeetingFeedbackWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchMeetingFeedbackCreateInput {
  @TypeGraphQLField(() => ID)
  pitchId!: string;

  @TypeGraphQLField({ nullable: true })
  reviewerNotes?: string;

  @TypeGraphQLField()
  courseProductId!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  reviewerId?: string;
}

@TypeGraphQLInputType()
export class PitchMeetingFeedbackUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField({ nullable: true })
  reviewerNotes?: string;

  @TypeGraphQLField({ nullable: true })
  courseProductId?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  reviewerId?: string;
}

@ArgsType()
export class PitchMeetingFeedbackWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchMeetingFeedbackWhereInput, { nullable: true })
  where?: PitchMeetingFeedbackWhereInput;

  @TypeGraphQLField(() => PitchMeetingFeedbackOrderByEnum, { nullable: true })
  orderBy?: PitchMeetingFeedbackOrderByEnum;
}

@ArgsType()
export class PitchMeetingFeedbackCreateManyArgs {
  @TypeGraphQLField(() => [PitchMeetingFeedbackCreateInput])
  data!: PitchMeetingFeedbackCreateInput[];
}

@ArgsType()
export class PitchMeetingFeedbackUpdateArgs {
  @TypeGraphQLField() data!: PitchMeetingFeedbackUpdateInput;
  @TypeGraphQLField() where!: PitchMeetingFeedbackWhereUniqueInput;
}

export enum PitchWrittenFeedbackOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC"
}

registerEnumType(PitchWrittenFeedbackOrderByEnum, {
  name: "PitchWrittenFeedbackOrderByInput"
});

@TypeGraphQLInputType()
export class PitchWrittenFeedbackWhereInput {
  @TypeGraphQLField(() => PitchWrittenFeedbackStatus, { nullable: true })
  status_eq?: PitchWrittenFeedbackStatus;

  @TypeGraphQLField({ nullable: true })
  courseProductId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class PitchWrittenFeedbackWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class PitchWrittenFeedbackCreateInput {
  @TypeGraphQLField(() => ID)
  pitchId!: string;

  @TypeGraphQLField({ nullable: true })
  reviewerNotes?: string;

  @TypeGraphQLField()
  courseProductId!: string;
}

@TypeGraphQLInputType()
export class PitchWrittenFeedbackUpdateInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  pitchId?: string;

  @TypeGraphQLField({ nullable: true })
  reviewerNotes?: string;

  @TypeGraphQLField({ nullable: true })
  courseProductId?: string;
}

@ArgsType()
export class PitchWrittenFeedbackWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => PitchWrittenFeedbackWhereInput, { nullable: true })
  where?: PitchWrittenFeedbackWhereInput;

  @TypeGraphQLField(() => PitchWrittenFeedbackOrderByEnum, { nullable: true })
  orderBy?: PitchWrittenFeedbackOrderByEnum;
}

@ArgsType()
export class PitchWrittenFeedbackCreateManyArgs {
  @TypeGraphQLField(() => [PitchWrittenFeedbackCreateInput])
  data!: PitchWrittenFeedbackCreateInput[];
}

@ArgsType()
export class PitchWrittenFeedbackUpdateArgs {
  @TypeGraphQLField() data!: PitchWrittenFeedbackUpdateInput;
  @TypeGraphQLField() where!: PitchWrittenFeedbackWhereUniqueInput;
}

export enum StripeWebhookEventOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(StripeWebhookEventOrderByEnum, {
  name: "StripeWebhookEventOrderByInput"
});

@TypeGraphQLInputType()
export class StripeWebhookEventWhereInput {
  @TypeGraphQLField(() => StripeWebhookEventStatus, { nullable: true })
  status_eq?: StripeWebhookEventStatus;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw_json?: JsonObject;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class StripeWebhookEventWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class StripeWebhookEventCreateInput {
  @TypeGraphQLField()
  type!: string;

  @TypeGraphQLField(() => GraphQLJSONObject)
  raw!: JsonObject;
}

@TypeGraphQLInputType()
export class StripeWebhookEventUpdateInput {
  @TypeGraphQLField({ nullable: true })
  type?: string;

  @TypeGraphQLField(() => GraphQLJSONObject, { nullable: true })
  raw?: JsonObject;
}

@ArgsType()
export class StripeWebhookEventWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => StripeWebhookEventWhereInput, { nullable: true })
  where?: StripeWebhookEventWhereInput;

  @TypeGraphQLField(() => StripeWebhookEventOrderByEnum, { nullable: true })
  orderBy?: StripeWebhookEventOrderByEnum;
}

@ArgsType()
export class StripeWebhookEventCreateManyArgs {
  @TypeGraphQLField(() => [StripeWebhookEventCreateInput])
  data!: StripeWebhookEventCreateInput[];
}

@ArgsType()
export class StripeWebhookEventUpdateArgs {
  @TypeGraphQLField() data!: StripeWebhookEventUpdateInput;
  @TypeGraphQLField() where!: StripeWebhookEventWhereUniqueInput;
}

export enum SubscriptionOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(SubscriptionOrderByEnum, {
  name: "SubscriptionOrderByInput"
});

@TypeGraphQLInputType()
export class SubscriptionWhereInput {
  @TypeGraphQLField({ nullable: true })
  url_eq?: string;

  @TypeGraphQLField({ nullable: true })
  jobId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class SubscriptionWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SubscriptionCreateInput {
  @TypeGraphQLField()
  eventTypeId!: string;

  @TypeGraphQLField(() => SubscriptionType)
  type!: SubscriptionType;

  @TypeGraphQLField({ nullable: true })
  url?: string;

  @TypeGraphQLField({ nullable: true })
  jobId?: string;

  @TypeGraphQLField({ nullable: true })
  active?: boolean;
}

@TypeGraphQLInputType()
export class SubscriptionUpdateInput {
  @TypeGraphQLField({ nullable: true })
  eventTypeId?: string;

  @TypeGraphQLField(() => SubscriptionType, { nullable: true })
  type?: SubscriptionType;

  @TypeGraphQLField({ nullable: true })
  url?: string;

  @TypeGraphQLField({ nullable: true })
  jobId?: string;

  @TypeGraphQLField({ nullable: true })
  active?: boolean;
}

@ArgsType()
export class SubscriptionWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SubscriptionWhereInput, { nullable: true })
  where?: SubscriptionWhereInput;

  @TypeGraphQLField(() => SubscriptionOrderByEnum, { nullable: true })
  orderBy?: SubscriptionOrderByEnum;
}

@ArgsType()
export class SubscriptionCreateManyArgs {
  @TypeGraphQLField(() => [SubscriptionCreateInput])
  data!: SubscriptionCreateInput[];
}

@ArgsType()
export class SubscriptionUpdateArgs {
  @TypeGraphQLField() data!: SubscriptionUpdateInput;
  @TypeGraphQLField() where!: SubscriptionWhereUniqueInput;
}

export enum SuggestedResourceOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(SuggestedResourceOrderByEnum, {
  name: "SuggestedResourceOrderByInput"
});

@TypeGraphQLInputType()
export class SuggestedResourceWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  suggestedResourceCategoryId_eq?: string;

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];
}

@TypeGraphQLInputType()
export class SuggestedResourceWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SuggestedResourceCreateInput {
  @TypeGraphQLField()
  companyName!: string;

  @TypeGraphQLField(() => ID)
  suggestedResourceCategoryId!: string;

  @TypeGraphQLField()
  url!: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => ID)
  logoFileId!: string;
}

@TypeGraphQLInputType()
export class SuggestedResourceUpdateInput {
  @TypeGraphQLField({ nullable: true })
  companyName?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  suggestedResourceCategoryId?: string;

  @TypeGraphQLField({ nullable: true })
  url?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  logoFileId?: string;
}

@ArgsType()
export class SuggestedResourceWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SuggestedResourceWhereInput, { nullable: true })
  where?: SuggestedResourceWhereInput;

  @TypeGraphQLField(() => SuggestedResourceOrderByEnum, { nullable: true })
  orderBy?: SuggestedResourceOrderByEnum;
}

@ArgsType()
export class SuggestedResourceCreateManyArgs {
  @TypeGraphQLField(() => [SuggestedResourceCreateInput])
  data!: SuggestedResourceCreateInput[];
}

@ArgsType()
export class SuggestedResourceUpdateArgs {
  @TypeGraphQLField() data!: SuggestedResourceUpdateInput;
  @TypeGraphQLField() where!: SuggestedResourceWhereUniqueInput;
}

export enum SuggestedResourceCategoryOrderByEnum {
  id_ASC = "id_ASC",
  id_DESC = "id_DESC"
}

registerEnumType(SuggestedResourceCategoryOrderByEnum, {
  name: "SuggestedResourceCategoryOrderByInput"
});

@TypeGraphQLInputType()
export class SuggestedResourceCategoryWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => Boolean, { nullable: true })
  archived_eq?: Boolean;
}

@TypeGraphQLInputType()
export class SuggestedResourceCategoryWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SuggestedResourceCategoryCreateInput {
  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  archived!: boolean;
}

@TypeGraphQLInputType()
export class SuggestedResourceCategoryUpdateInput {
  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  archived?: boolean;
}

@ArgsType()
export class SuggestedResourceCategoryWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SuggestedResourceCategoryWhereInput, {
    nullable: true
  })
  where?: SuggestedResourceCategoryWhereInput;

  @TypeGraphQLField(() => SuggestedResourceCategoryOrderByEnum, {
    nullable: true
  })
  orderBy?: SuggestedResourceCategoryOrderByEnum;
}

@ArgsType()
export class SuggestedResourceCategoryCreateManyArgs {
  @TypeGraphQLField(() => [SuggestedResourceCategoryCreateInput])
  data!: SuggestedResourceCategoryCreateInput[];
}

@ArgsType()
export class SuggestedResourceCategoryUpdateArgs {
  @TypeGraphQLField() data!: SuggestedResourceCategoryUpdateInput;
  @TypeGraphQLField() where!: SuggestedResourceCategoryWhereUniqueInput;
}
